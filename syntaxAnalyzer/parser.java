
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 10 10:45:16 ART 2014
//----------------------------------------------------

package compiler2014;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 10 10:45:16 ART 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\037\002\000\002\040" +
    "\002\000\002\041\002\000\002\002\012\000\002\032\005" +
    "\000\002\032\003\000\002\042\002\000\002\003\011\000" +
    "\002\043\002\000\002\003\006\000\002\044\002\000\002" +
    "\012\012\000\002\045\002\000\002\012\012\000\002\012" +
    "\002\000\002\046\002\000\002\033\006\000\002\047\002" +
    "\000\002\033\011\000\002\033\002\000\002\050\002\000" +
    "\002\034\006\000\002\034\002\000\002\051\002\000\002" +
    "\035\007\000\002\035\002\000\002\052\002\000\002\053" +
    "\002\000\002\004\010\000\002\011\005\000\002\011\002" +
    "\000\002\013\004\000\002\013\002\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\054\002\000\002" +
    "\005\012\000\002\055\002\000\002\005\007\000\002\056" +
    "\002\000\002\005\010\000\002\005\011\000\002\005\011" +
    "\000\002\005\010\000\002\057\002\000\002\005\012\000" +
    "\002\005\005\000\002\005\005\000\002\005\004\000\002" +
    "\005\004\000\002\005\003\000\002\005\003\000\002\014" +
    "\003\000\002\014\002\000\002\015\004\000\002\015\002" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\017\004\000\002\017\002\000\002\020\004\000\002" +
    "\030\004\000\002\030\002\000\002\016\004\000\002\016" +
    "\002\000\002\031\005\000\002\031\002\000\002\007\004" +
    "\000\002\007\007\000\002\007\007\000\002\007\011\000" +
    "\002\007\011\000\002\007\004\000\002\007\005\000\002" +
    "\007\005\000\002\007\006\000\002\027\004\000\002\027" +
    "\002\000\002\010\003\000\002\010\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\025\003" +
    "\000\002\025\003\000\002\026\003\000\002\026\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\004\042\005\001\002\000\004\002\312\001" +
    "\002\000\004\036\000\001\002\000\004\036\007\001\002" +
    "\000\004\030\uffff\001\002\000\004\030\011\001\002\000" +
    "\014\031\ufff2\037\014\040\020\043\013\046\012\001\002" +
    "\000\010\014\uffdf\032\uffdf\036\uffdf\001\002\000\010\014" +
    "\uffdd\032\uffdd\036\uffdd\001\002\000\004\036\303\001\002" +
    "\000\004\033\301\001\002\000\004\036\024\001\002\000" +
    "\004\031\ufffe\001\002\000\010\014\uffde\032\uffde\036\uffde" +
    "\001\002\000\004\031\ufffb\001\002\000\004\031\023\001" +
    "\002\000\004\002\ufffd\001\002\000\012\013\025\015\026" +
    "\032\ufff8\033\ufff8\001\002\000\012\014\uffea\040\020\043" +
    "\013\046\012\001\002\000\004\053\042\001\002\000\006" +
    "\032\030\033\uffed\001\002\000\004\036\032\001\002\000" +
    "\004\033\ufff7\001\002\000\010\015\033\032\ufff1\033\ufff1" +
    "\001\002\000\004\053\036\001\002\000\006\032\030\033" +
    "\uffed\001\002\000\004\033\ufff0\001\002\000\004\016\037" +
    "\001\002\000\006\032\uffef\033\uffef\001\002\000\006\032" +
    "\030\033\uffed\001\002\000\004\033\uffee\001\002\000\004" +
    "\016\043\001\002\000\006\032\ufffa\033\ufffa\001\002\000" +
    "\006\032\030\033\uffed\001\002\000\004\033\ufff9\001\002" +
    "\000\004\036\271\001\002\000\004\014\050\001\002\000" +
    "\004\030\ufff6\001\002\000\004\030\052\001\002\000\036" +
    "\030\uffe6\031\uffe6\033\uffe6\034\uffe6\036\uffe6\040\uffe6\041" +
    "\uffe6\043\uffe6\044\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\001\002\000\014\031\ufff2\037\014\040\020\043" +
    "\013\046\012\001\002\000\004\036\056\001\002\000\004" +
    "\031\ufff5\001\002\000\004\013\025\001\002\000\036\030" +
    "\uffe2\031\uffe2\033\uffe2\034\uffe2\036\uffe2\040\020\041\uffe2" +
    "\043\013\044\uffe2\046\012\047\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\001\002\000\030\030\052\031\uffe0\033\077\034\066" +
    "\036\075\041\100\044\070\047\072\050\073\051\067\052" +
    "\101\001\002\000\004\033\064\001\002\000\004\036\063" +
    "\001\002\000\010\015\026\032\ufff8\033\ufff8\001\002\000" +
    "\036\030\uffe2\031\uffe2\033\uffe2\034\uffe2\036\uffe2\040\020" +
    "\041\uffe2\043\013\044\uffe2\046\012\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\001\002\000\030\030\uffe3\031\uffe3\033\uffe3" +
    "\034\uffe3\036\uffe3\041\uffe3\044\uffe3\047\uffe3\050\uffe3\051" +
    "\uffe3\052\uffe3\001\002\000\004\013\260\001\002\000\024" +
    "\012\112\013\106\027\102\033\uffca\034\103\036\107\053" +
    "\104\054\113\055\105\001\002\000\004\033\254\001\002" +
    "\000\030\030\uffcc\031\uffcc\033\uffcc\034\uffcc\036\uffcc\041" +
    "\uffcc\044\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\001\002" +
    "\000\004\036\245\001\002\000\004\013\236\001\002\000" +
    "\004\031\uffe5\001\002\000\014\013\211\015\213\022\uffda" +
    "\023\uffda\024\uffda\001\002\000\030\030\052\031\uffe0\033" +
    "\077\034\066\036\075\041\100\044\070\047\072\050\073" +
    "\051\067\052\101\001\002\000\030\030\uffcd\031\uffcd\033" +
    "\uffcd\034\uffcd\036\uffcd\041\uffcd\044\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\001\002\000\004\033\207\001\002\000" +
    "\022\012\112\013\106\027\102\034\103\036\107\053\104" +
    "\054\113\055\105\001\002\000\022\012\112\013\106\027" +
    "\102\034\103\036\107\053\104\054\113\055\105\001\002" +
    "\000\004\013\164\001\002\000\046\004\uff9d\005\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\011\uff9d\014\uff9d\016\uff9d\017\uff9d" +
    "\020\uff9d\021\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\032" +
    "\uff9d\033\uff9d\035\uff9d\001\002\000\046\004\uff9b\005\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\011\uff9b\014\uff9b\016\uff9b\017" +
    "\uff9b\020\uff9b\021\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\032\uff9b\033\uff9b\035\uff9b\001\002\000\022\012\112\013" +
    "\106\027\102\034\103\036\107\053\104\054\113\055\105" +
    "\001\002\000\052\004\133\005\123\006\125\007\121\010" +
    "\137\011\131\013\145\014\uffb1\015\143\016\uffb1\017\135" +
    "\020\122\021\115\025\120\026\130\027\134\030\uffb1\032" +
    "\uffb1\033\uffb1\035\132\001\002\000\046\004\133\005\123" +
    "\006\125\007\121\010\137\011\131\014\uffb1\016\uffb1\017" +
    "\135\020\122\021\115\025\120\026\130\027\134\030\uffb1" +
    "\032\uffb1\033\uffb1\035\132\001\002\000\004\030\052\001" +
    "\002\000\022\012\112\013\106\027\102\034\103\036\107" +
    "\053\104\054\113\055\105\001\002\000\046\004\uff9c\005" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\014\uff9c\016\uff9c" +
    "\017\uff9c\020\uff9c\021\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\032\uff9c\033\uff9c\035\uff9c\001\002\000\046\004\133" +
    "\005\123\006\125\007\121\010\137\011\131\014\uffb1\016" +
    "\uffb1\017\135\020\122\021\115\025\120\026\130\027\134" +
    "\030\uffb1\032\uffb1\033\uffb1\035\132\001\002\000\022\012" +
    "\uff9f\013\uff9f\027\uff9f\034\uff9f\036\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\001\002\000\022\012\112\013\106\027\102\034" +
    "\103\036\107\053\104\054\113\055\105\001\002\000\022" +
    "\012\uffac\013\uffac\027\uffac\034\uffac\036\uffac\053\uffac\054" +
    "\uffac\055\uffac\001\002\000\022\012\uffaa\013\uffaa\027\uffaa" +
    "\034\uffaa\036\uffaa\053\uffaa\054\uffaa\055\uffaa\001\002\000" +
    "\022\012\uffa2\013\uffa2\027\uffa2\034\uffa2\036\uffa2\053\uffa2" +
    "\054\uffa2\055\uffa2\001\002\000\022\012\uff9e\013\uff9e\027" +
    "\uff9e\034\uff9e\036\uff9e\053\uff9e\054\uff9e\055\uff9e\001\002" +
    "\000\022\012\uffa4\013\uffa4\027\uffa4\034\uffa4\036\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\001\002\000\022\012\uffad\013\uffad" +
    "\027\uffad\034\uffad\036\uffad\053\uffad\054\uffad\055\uffad\001" +
    "\002\000\022\012\uffa3\013\uffa3\027\uffa3\034\uffa3\036\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\001\002\000\022\012\uffae\013" +
    "\uffae\027\uffae\034\uffae\036\uffae\053\uffae\054\uffae\055\uffae" +
    "\001\002\000\022\012\uffab\013\uffab\027\uffab\034\uffab\036" +
    "\uffab\053\uffab\054\uffab\055\uffab\001\002\000\022\012\uffa8" +
    "\013\uffa8\027\uffa8\034\uffa8\036\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\001\002\000\022\012\uffa6\013\uffa6\027\uffa6\034\uffa6" +
    "\036\uffa6\053\uffa6\054\uffa6\055\uffa6\001\002\000\022\012" +
    "\uffa7\013\uffa7\027\uffa7\034\uffa7\036\uffa7\053\uffa7\054\uffa7" +
    "\055\uffa7\001\002\000\022\012\uffa5\013\uffa5\027\uffa5\034" +
    "\uffa5\036\uffa5\053\uffa5\054\uffa5\055\uffa5\001\002\000\022" +
    "\012\uffa9\013\uffa9\027\uffa9\034\uffa9\036\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\001\002\000\022\012\uffa1\013\uffa1\027\uffa1" +
    "\034\uffa1\036\uffa1\053\uffa1\054\uffa1\055\uffa1\001\002\000" +
    "\046\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4" +
    "\014\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\032\uffb4\033\uffb4\035\uffb4\001\002" +
    "\000\022\012\uffa0\013\uffa0\027\uffa0\034\uffa0\036\uffa0\053" +
    "\uffa0\054\uffa0\055\uffa0\001\002\000\046\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\014\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2" +
    "\032\uffb2\033\uffb2\035\uffb2\001\002\000\030\030\uffd1\031" +
    "\uffd1\033\uffd1\034\uffd1\036\uffd1\041\uffd1\044\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\001\002\000\046\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\014\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\032\uffb6\033\uffb6\035\uffb6\001\002\000\022\012\112" +
    "\013\106\027\102\034\103\036\107\053\104\054\113\055" +
    "\105\001\002\000\046\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\011\uffbb\014\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\032\uffbb\033\uffbb" +
    "\035\uffbb\001\002\000\024\012\112\013\106\014\uffbe\027" +
    "\102\034\103\036\107\053\104\054\113\055\105\001\002" +
    "\000\006\014\uffbc\032\152\001\002\000\004\014\150\001" +
    "\002\000\046\004\133\005\123\006\125\007\121\010\137" +
    "\011\131\014\uffb1\016\uffb1\017\135\020\122\021\115\025" +
    "\120\026\130\027\134\030\uffb1\032\uffb1\033\uffb1\035\132" +
    "\001\002\000\046\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\014\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\025\uffb9\026\uffb9\027\uffb9\030\uffb9\032\uffb9\033\uffb9\035" +
    "\uffb9\001\002\000\022\012\112\013\106\027\102\034\103" +
    "\036\107\053\104\054\113\055\105\001\002\000\004\014" +
    "\uffbf\001\002\000\006\014\uffbc\032\152\001\002\000\004" +
    "\014\uffbd\001\002\000\004\016\157\001\002\000\046\004" +
    "\133\005\123\006\125\007\121\010\137\011\131\014\uffb1" +
    "\016\uffb1\017\135\020\122\021\115\025\120\026\130\027" +
    "\134\030\uffb1\032\uffb1\033\uffb1\035\132\001\002\000\046" +
    "\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\014" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\025\uffba\026\uffba" +
    "\027\uffba\030\uffba\032\uffba\033\uffba\035\uffba\001\002\000" +
    "\004\014\162\001\002\000\046\004\133\005\123\006\125" +
    "\007\121\010\137\011\131\014\uffb1\016\uffb1\017\135\020" +
    "\122\021\115\025\120\026\130\027\134\030\uffb1\032\uffb1" +
    "\033\uffb1\035\132\001\002\000\046\004\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\014\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\032" +
    "\uffb3\033\uffb3\035\uffb3\001\002\000\004\056\165\001\002" +
    "\000\004\032\166\001\002\000\012\037\167\040\020\043" +
    "\013\046\012\001\002\000\006\014\uffc3\032\171\001\002" +
    "\000\006\014\uffc3\032\171\001\002\000\024\012\112\013" +
    "\106\027\102\034\103\036\107\053\104\054\113\055\105" +
    "\056\174\001\002\000\004\014\173\001\002\000\046\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\014\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\032\uffb8\033\uffb8\035\uffb8\001\002\000\006" +
    "\014\uffaf\032\uffaf\001\002\000\006\014\uffc0\032\200\001" +
    "\002\000\004\014\uffc4\001\002\000\006\014\uffb0\032\uffb0" +
    "\001\002\000\024\012\112\013\106\027\102\034\103\036" +
    "\107\053\104\054\113\055\105\056\174\001\002\000\004" +
    "\014\uffc2\001\002\000\004\014\uffc1\001\002\000\004\014" +
    "\204\001\002\000\046\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\014\uffb7\016\uffb7\017\uffb7\020\uffb7\021" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\032\uffb7\033\uffb7" +
    "\035\uffb7\001\002\000\046\004\133\005\123\006\125\007" +
    "\121\010\137\011\131\014\uffb1\016\uffb1\017\135\020\122" +
    "\021\115\025\120\026\130\027\134\030\uffb1\032\uffb1\033" +
    "\uffb1\035\132\001\002\000\046\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\010\uffb5\011\uffb5\014\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\032\uffb5" +
    "\033\uffb5\035\uffb5\001\002\000\030\030\uffcf\031\uffcf\033" +
    "\uffcf\034\uffcf\036\uffcf\041\uffcf\044\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\001\002\000\004\031\uffe1\001\002\000" +
    "\024\012\112\013\106\014\uffbe\027\102\034\103\036\107" +
    "\053\104\054\113\055\105\001\002\000\010\022\217\023" +
    "\220\024\222\001\002\000\022\012\112\013\106\027\102" +
    "\034\103\036\107\053\104\054\113\055\105\001\002\000" +
    "\004\016\215\001\002\000\010\022\uffdc\023\uffdc\024\uffdc" +
    "\001\002\000\010\022\217\023\220\024\222\001\002\000" +
    "\022\012\uffc6\013\uffc6\027\uffc6\034\uffc6\036\uffc6\053\uffc6" +
    "\054\uffc6\055\uffc6\001\002\000\022\012\uffc5\013\uffc5\027" +
    "\uffc5\034\uffc5\036\uffc5\053\uffc5\054\uffc5\055\uffc5\001\002" +
    "\000\022\012\112\013\106\027\102\034\103\036\107\053" +
    "\104\054\113\055\105\001\002\000\022\012\uffc7\013\uffc7" +
    "\027\uffc7\034\uffc7\036\uffc7\053\uffc7\054\uffc7\055\uffc7\001" +
    "\002\000\004\033\224\001\002\000\030\030\uffdb\031\uffdb" +
    "\033\uffdb\034\uffdb\036\uffdb\041\uffdb\044\uffdb\047\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\001\002\000\022\012\112\013\106" +
    "\027\102\034\103\036\107\053\104\054\113\055\105\001" +
    "\002\000\004\033\227\001\002\000\030\030\uffd9\031\uffd9" +
    "\033\uffd9\034\uffd9\036\uffd9\041\uffd9\044\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\001\002\000\004\014\231\001\002" +
    "\000\004\033\uffd8\001\002\000\004\033\233\001\002\000" +
    "\030\030\uffd7\031\uffd7\033\uffd7\034\uffd7\036\uffd7\041\uffd7" +
    "\044\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\001\002\000" +
    "\004\031\235\001\002\000\042\030\uffe4\031\uffe4\033\uffe4" +
    "\034\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\001\002\000\022\012\112\013\106\027\102\034\103\036" +
    "\107\053\104\054\113\055\105\001\002\000\004\014\240" +
    "\001\002\000\004\030\052\001\002\000\032\030\uffc8\031" +
    "\uffc8\033\uffc8\034\uffc8\036\uffc8\041\uffc8\044\uffc8\045\243" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\001\002\000\030\030" +
    "\uffd4\031\uffd4\033\uffd4\034\uffd4\036\uffd4\041\uffd4\044\uffd4" +
    "\047\uffd4\050\uffd4\051\uffd4\052\uffd4\001\002\000\004\030" +
    "\052\001\002\000\030\030\uffc9\031\uffc9\033\uffc9\034\uffc9" +
    "\036\uffc9\041\uffc9\044\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\001\002\000\004\024\uffd3\001\002\000\004\024\247" +
    "\001\002\000\022\012\112\013\106\027\102\034\103\036" +
    "\107\053\104\054\113\055\105\001\002\000\004\032\251" +
    "\001\002\000\022\012\112\013\106\027\102\034\103\036" +
    "\107\053\104\054\113\055\105\001\002\000\004\030\052" +
    "\001\002\000\030\030\uffd2\031\uffd2\033\uffd2\034\uffd2\036" +
    "\uffd2\041\uffd2\044\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2" +
    "\001\002\000\030\030\uffce\031\uffce\033\uffce\034\uffce\036" +
    "\uffce\041\uffce\044\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\001\002\000\004\033\257\001\002\000\004\033\uffcb\001" +
    "\002\000\030\030\uffd0\031\uffd0\033\uffd0\034\uffd0\036\uffd0" +
    "\041\uffd0\044\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\001" +
    "\002\000\004\056\261\001\002\000\004\032\262\001\002" +
    "\000\012\037\263\040\020\043\013\046\012\001\002\000" +
    "\006\014\uffc3\032\171\001\002\000\006\014\uffc3\032\171" +
    "\001\002\000\004\014\266\001\002\000\030\030\uffd6\031" +
    "\uffd6\033\uffd6\034\uffd6\036\uffd6\041\uffd6\044\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\052\uffd6\001\002\000\004\014\270\001" +
    "\002\000\030\030\uffd5\031\uffd5\033\uffd5\034\uffd5\036\uffd5" +
    "\041\uffd5\044\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\001" +
    "\002\000\006\014\uffec\032\uffec\001\002\000\006\014\uffe7" +
    "\032\273\001\002\000\010\040\020\043\013\046\012\001" +
    "\002\000\004\014\uffeb\001\002\000\004\036\276\001\002" +
    "\000\006\014\uffe9\032\uffe9\001\002\000\006\014\uffe7\032" +
    "\273\001\002\000\004\014\uffe8\001\002\000\014\031\ufff2" +
    "\037\014\040\020\043\013\046\012\001\002\000\004\031" +
    "\ufffc\001\002\000\004\013\304\001\002\000\012\014\uffea" +
    "\040\020\043\013\046\012\001\002\000\004\014\306\001" +
    "\002\000\004\030\ufff4\001\002\000\004\030\052\001\002" +
    "\000\014\031\ufff2\037\014\040\020\043\013\046\012\001" +
    "\002\000\004\031\ufff3\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\037\005\001\001\000\002\001\001\000\004\040\007" +
    "\001\001\000\002\001\001\000\012\003\014\012\020\032" +
    "\016\036\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\026\001" +
    "\001\000\006\034\046\036\045\001\001\000\002\001\001" +
    "\000\004\033\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\033\001\001\000\002\001\001\000\004" +
    "\033\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\037\001\001\000\004\033\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\043\001\001\000" +
    "\004\033\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\050\001\001\000\004\004" +
    "\052\001\001\000\004\052\056\001\001\000\006\012\054" +
    "\036\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\060\011\057\036\061\001\001" +
    "\000\010\004\070\005\075\013\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\026\001\001\000\010" +
    "\003\060\011\064\036\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\255\014\254\021\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\233\001\001\000\004\055\211" +
    "\001\001\000\010\004\070\005\075\013\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\110\021\107" +
    "\001\001\000\006\007\204\021\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\160" +
    "\021\107\001\001\000\016\022\115\023\125\024\123\025" +
    "\116\026\126\027\143\001\001\000\016\022\115\023\125" +
    "\024\123\025\116\026\126\027\141\001\001\000\004\004" +
    "\140\001\001\000\006\007\113\021\107\001\001\000\002" +
    "\001\001\000\016\022\115\023\125\024\123\025\116\026" +
    "\126\027\135\001\001\000\002\001\001\000\006\007\137" +
    "\021\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\155\021\107\001" +
    "\001\000\002\001\001\000\010\007\145\016\146\021\107" +
    "\001\001\000\004\031\152\001\001\000\002\001\001\000" +
    "\016\022\115\023\125\024\123\025\116\026\126\027\150" +
    "\001\001\000\002\001\001\000\006\007\153\021\107\001" +
    "\001\000\002\001\001\000\004\031\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\022\115\023\125\024" +
    "\123\025\116\026\126\027\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\022\115\023\125\024\123\025" +
    "\116\026\126\027\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\167\001\001\000" +
    "\004\017\202\001\001\000\004\017\171\001\001\000\012" +
    "\007\176\010\174\020\175\021\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\176\010\174\020\201\021\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\022\115\023\125\024\123\025\116\026\126\027\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\145\016\227\021\107\001\001\000\004" +
    "\006\224\001\001\000\006\007\213\021\107\001\001\000" +
    "\002\001\001\000\004\054\215\001\001\000\004\006\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\222\021\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\225\021\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\236\021\107" +
    "\001\001\000\002\001\001\000\004\004\240\001\001\000" +
    "\004\015\241\001\001\000\002\001\001\000\004\004\243" +
    "\001\001\000\002\001\001\000\004\057\245\001\001\000" +
    "\002\001\001\000\006\007\247\021\107\001\001\000\002" +
    "\001\001\000\006\007\251\021\107\001\001\000\004\004" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\263\001\001\000\004" +
    "\017\266\001\001\000\004\017\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\271\001\001\000\004\035\273\001\001\000" +
    "\004\036\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\276\001\001\000\004\035\277\001\001\000" +
    "\002\001\001\000\012\003\014\012\020\032\301\036\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\304\036\045\001\001\000\002\001\001\000\004\045\306" +
    "\001\001\000\004\004\307\001\001\000\006\012\310\036" +
    "\053\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public static void main(String[] args){
    try {
      /* Loading the file*/
      FileInputStream file = new FileInputStream(args[0]);/**/
      /* Create lexer analizer with file*/
      yylex lex = new yylex(file);
      /* Create parser analyzer with lex*/  
      parser par = new parser(lex);
      /* Analize file */
      par.setScanner(lex);
      par.parse();
    }catch(Exception x){
      x.printStackTrace();
      System.out.println("Error fatal.\n"); 
    }
  }
  
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error");
    System.out.println("Mensaje: "+message);
    System.out.println("info: "+info.toString());
    if(info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
        /* Comprueba si el numero de línea es mayor o igual que cero */
        if(s.left >= 0) {
	        m.append(" en linea "+(s.left+1));
	        /*Comprueba si el numero de columna es mayoro igual que cero */
	        if (s.right >= 0)
	            m.append(", y columna "+(s.right+1));
	        }
        }
    m.append(" : "+message);
    System.err.println(m);
  }
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  static symbolTable table = new symbolTable();
  static LinkedList<absSymbol>  declList = new LinkedList<absSymbol>();
  static LinkedList<absSymbol>  parList = new LinkedList<absSymbol>();
  private LinkedList<absSymbol> setType(LinkedList<absSymbol> symbolList, String type) {
    for (int i = 0 ; i < symbolList.size() ; i++) {
        symbolList.get(i).type = type;
    }
    return symbolList;
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // literal ::= BOOLEAN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // literal ::= FLOAT 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // literal ::= INT 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // cond_op ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cond_op ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // eq_op ::= NOT_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eq_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // eq_op ::= EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eq_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // rel_op ::= GREATER_EQ_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // rel_op ::= LESS_EQ_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // rel_op ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // rel_op ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arith_op ::= MODULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arith_op ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arith_op ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arith_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arith_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bin_op ::= cond_op 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bin_op ::= eq_op 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bin_op ::= rel_op 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // bin_op ::= arith_op 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // externinvk_arg ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // externinvk_arg ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr_ ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_ ::= bin_op expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= LPAR expr RPAR expr_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= NOT expr expr_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= MINUS expr expr_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= literal expr_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= WEXTERNINVK LPAR STRING_LITERAL COMMA WVOID arg_invoc RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= WEXTERNINVK LPAR STRING_LITERAL COMMA type arg_invoc RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= ID LPAR expr_parameters RPAR expr_ 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		if (table.search(i) == null) 
                                                                    parser.report_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= ID LC expr RC expr_ 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		if (table.search(i) == null) 
                                                                    parser.report_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= ID expr_ 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if (table.search(i) == null) 
                                                                    parser.report_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_parameters_ ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_parameters_",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_parameters_ ::= COMMA expr expr_parameters_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_parameters_",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_parameters ::= expr expr_parameters_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // set_externinvk_arg_ ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_externinvk_arg_",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // set_externinvk_arg_ ::= COMMA set_externinvk_arg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_externinvk_arg_",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // set_externinvk_arg ::= externinvk_arg set_externinvk_arg_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_externinvk_arg",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arg_invoc ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_invoc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arg_invoc ::= COMMA set_externinvk_arg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_invoc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assign_op ::= ASSIGN_DEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assign_op ::= ASSIGN_INC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assign_op ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // else_block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // else_block ::= WELSE block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_return ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_return",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_return ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_return",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= WCONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // statement ::= WBREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= WRETURN expr_return SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= WWHILE expr block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= WFOR ID NT$16 ASSIGN expr COMMA expr block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$16 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if (table.search(i) == null) 
                                                            parser.report_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= WIF LPAR expr RPAR block else_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= WEXTERNINVK LPAR STRING_LITERAL COMMA WVOID arg_invoc RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= WEXTERNINVK LPAR STRING_LITERAL COMMA type arg_invoc RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= ID LPAR expr_parameters RPAR NT$15 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$15 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
if (table.search(i) == null) 
                                                            parser.report_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= ID NT$14 assign_op expr SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$14 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if (table.search(i) == null) 
                                                            parser.report_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= ID LC expr RC NT$13 assign_op expr SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$13 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if (table.search(i) == null) 
                                                            parser.report_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= WINT 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= WBOOLEAN 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= WFLOAT 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // set_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // set_statement ::= statement set_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // set_field_decl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_field_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // set_field_decl ::= field_decl SEMICOLON set_field_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_field_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // block ::= LLL NT$11 set_field_decl set_statement NT$12 RLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
table.deleteLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$11 ::= 
            {
              Object RESULT =null;
table.insertLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // set_type_id ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		RESULT = (LinkedList<absSymbol>)parList.clone();
                                            parList.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_type_id",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // set_type_id ::= COMMA type ID NT$10 set_type_id 
            {
              LinkedList<absSymbol> RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (LinkedList<absSymbol>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_type_id",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$10 ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parList.add(new simpleSymbol(i, null, t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parameters ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		RESULT = (LinkedList<absSymbol>)parList.clone();
                                            parList.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parameters ::= type ID NT$9 set_type_id 
            {
              LinkedList<absSymbol> RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (LinkedList<absSymbol>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$9 ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parList.add(new simpleSymbol(i, null, t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // set_complete_id ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		RESULT = (LinkedList<absSymbol>)declList.clone();
                                                declList.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_complete_id",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // set_complete_id ::= COMMA ID LC INT RC NT$8 set_complete_id 
            {
              LinkedList<absSymbol> RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (LinkedList<absSymbol>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_complete_id",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
declList.add(new arraySymbol(i, null, il, null));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // set_complete_id ::= COMMA ID NT$7 set_complete_id 
            {
              LinkedList<absSymbol> RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (LinkedList<absSymbol>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_complete_id",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
declList.add(new simpleSymbol(i, null, null));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // set_method_decl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_method_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // set_method_decl ::= WVOID ID LPAR parameters RPAR NT$6 block set_method_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_method_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
functionSymbol f = new functionSymbol(i, t, p);
                                                            if (table.insertSymbol(f) == null) {
                                                                parser.report_error("ID ya difinido: ",i);
                                                            } else {
                                                                if (table.insertSymbolList(f.parameters)==null)
                                                                    parser.report_error("ID ya difinido: ",f.parameters.toString());
                                                                }
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // set_method_decl ::= type ID LPAR parameters RPAR NT$5 block set_method_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_method_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$5 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
functionSymbol f = new functionSymbol(i, t, p);
                                                            if (table.insertSymbol(f) == null) {
                                                                parser.report_error("ID ya difinido: ",i);
                                                            } else {
                                                                if (table.insertSymbolList(f.parameters)==null)
                                                                    parser.report_error("ID ya difinido: ",f.parameters.toString());
                                                                }
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // field_decl ::= type ID NT$4 set_complete_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (table.insertSymbolList(setType(s, t)) == null)
                                                        parser.report_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if (table.insertSymbol(new simpleSymbol(i, null, t)) == null)
                                                        parser.report_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_decl ::= type ID LC INT RC NT$3 set_complete_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (table.insertSymbolList(setType(s, t)) == null)
                                                        parser.report_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if (table.insertSymbol(new arraySymbol(i, t, il, null)) == null)
                                                        parser.report_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // set_decl ::= set_method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_decl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // set_decl ::= field_decl SEMICOLON set_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_decl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= WCLASS NT$0 ID NT$1 LLL set_decl NT$2 RLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
table.deleteLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if (table.insertSymbol(new simpleSymbol(i, null, "Class")) == null)
                                                                parser.report_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
table.insertLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

