
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 11 00:03:15 ART 2014
//----------------------------------------------------

package compiler2014;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 11 00:03:15 ART 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\037\002\000\002\040" +
    "\002\000\002\041\002\000\002\002\012\000\002\032\005" +
    "\000\002\032\003\000\002\042\002\000\002\003\011\000" +
    "\002\043\002\000\002\003\006\000\002\044\002\000\002" +
    "\045\002\000\002\046\002\000\002\012\014\000\002\047" +
    "\002\000\002\050\002\000\002\051\002\000\002\012\014" +
    "\000\002\012\002\000\002\052\002\000\002\033\006\000" +
    "\002\053\002\000\002\033\011\000\002\033\002\000\002" +
    "\054\002\000\002\034\006\000\002\034\002\000\002\055" +
    "\002\000\002\035\007\000\002\035\002\000\002\056\002" +
    "\000\002\057\002\000\002\004\010\000\002\011\005\000" +
    "\002\011\002\000\002\013\004\000\002\013\002\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\060" +
    "\002\000\002\005\012\000\002\061\002\000\002\005\007" +
    "\000\002\062\002\000\002\005\010\000\002\005\011\000" +
    "\002\005\011\000\002\005\010\000\002\063\002\000\002" +
    "\005\012\000\002\005\005\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\005\003\000\002\005\003" +
    "\000\002\014\003\000\002\014\002\000\002\015\004\000" +
    "\002\015\002\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\017\004\000\002\017\002\000\002\020" +
    "\004\000\002\030\004\000\002\030\002\000\002\016\004" +
    "\000\002\016\002\000\002\031\005\000\002\031\002\000" +
    "\002\007\004\000\002\007\007\000\002\007\007\000\002" +
    "\007\011\000\002\007\011\000\002\007\004\000\002\007" +
    "\005\000\002\007\005\000\002\007\006\000\002\027\004" +
    "\000\002\027\002\000\002\010\003\000\002\010\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\025\003\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\004\042\005\001\002\000\004\002\316\001" +
    "\002\000\004\036\000\001\002\000\004\036\007\001\002" +
    "\000\004\030\uffff\001\002\000\004\030\011\001\002\000" +
    "\014\031\uffee\037\014\040\020\043\013\046\012\001\002" +
    "\000\010\014\uffdb\032\uffdb\036\uffdb\001\002\000\010\014" +
    "\uffd9\032\uffd9\036\uffd9\001\002\000\004\036\305\001\002" +
    "\000\004\033\303\001\002\000\004\036\024\001\002\000" +
    "\004\031\ufffe\001\002\000\010\014\uffda\032\uffda\036\uffda" +
    "\001\002\000\004\031\ufffb\001\002\000\004\031\023\001" +
    "\002\000\004\002\ufffd\001\002\000\012\013\ufff6\015\025" +
    "\032\ufff8\033\ufff8\001\002\000\004\053\277\001\002\000" +
    "\004\013\042\001\002\000\006\032\030\033\uffe9\001\002" +
    "\000\004\036\032\001\002\000\004\033\ufff7\001\002\000" +
    "\010\015\033\032\uffed\033\uffed\001\002\000\004\053\036" +
    "\001\002\000\006\032\030\033\uffe9\001\002\000\004\033" +
    "\uffec\001\002\000\004\016\037\001\002\000\006\032\uffeb" +
    "\033\uffeb\001\002\000\006\032\030\033\uffe9\001\002\000" +
    "\004\033\uffea\001\002\000\012\014\uffe6\040\020\043\013" +
    "\046\012\001\002\000\004\036\267\001\002\000\004\014" +
    "\045\001\002\000\004\030\ufff5\001\002\000\004\030\047" +
    "\001\002\000\036\030\uffe2\031\uffe2\033\uffe2\034\uffe2\036" +
    "\uffe2\040\uffe2\041\uffe2\043\uffe2\044\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\001\002\000\014\031\ufff4\037" +
    "\ufff4\040\ufff4\043\ufff4\046\ufff4\001\002\000\014\031\uffee" +
    "\037\014\040\020\043\013\046\012\001\002\000\004\036" +
    "\054\001\002\000\004\031\ufff3\001\002\000\004\013\ufff6" +
    "\001\002\000\036\030\uffde\031\uffde\033\uffde\034\uffde\036" +
    "\uffde\040\020\041\uffde\043\013\044\uffde\046\012\047\uffde" +
    "\050\uffde\051\uffde\052\uffde\001\002\000\030\030\047\031" +
    "\uffdc\033\075\034\064\036\073\041\076\044\066\047\071" +
    "\050\070\051\065\052\077\001\002\000\004\033\062\001" +
    "\002\000\004\036\061\001\002\000\010\015\025\032\ufff8" +
    "\033\ufff8\001\002\000\036\030\uffde\031\uffde\033\uffde\034" +
    "\uffde\036\uffde\040\020\041\uffde\043\013\044\uffde\046\012" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\001\002\000\030\030" +
    "\uffdf\031\uffdf\033\uffdf\034\uffdf\036\uffdf\041\uffdf\044\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\052\uffdf\001\002\000\004\013" +
    "\256\001\002\000\024\012\107\013\104\027\100\033\uffc6" +
    "\034\101\036\105\053\102\054\111\055\103\001\002\000" +
    "\004\033\252\001\002\000\030\030\uffc8\031\uffc8\033\uffc8" +
    "\034\uffc8\036\uffc8\041\uffc8\044\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\001\002\000\004\013\243\001\002\000\004" +
    "\036\234\001\002\000\004\031\uffe1\001\002\000\014\013" +
    "\210\015\211\022\uffd6\023\uffd6\024\uffd6\001\002\000\030" +
    "\030\047\031\uffdc\033\075\034\064\036\073\041\076\044" +
    "\066\047\071\050\070\051\065\052\077\001\002\000\030" +
    "\030\uffc9\031\uffc9\033\uffc9\034\uffc9\036\uffc9\041\uffc9\044" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\001\002\000\004" +
    "\033\205\001\002\000\022\012\107\013\104\027\100\034" +
    "\101\036\105\053\102\054\111\055\103\001\002\000\022" +
    "\012\107\013\104\027\100\034\101\036\105\053\102\054" +
    "\111\055\103\001\002\000\004\013\162\001\002\000\046" +
    "\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\014" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\025\uff99\026\uff99" +
    "\027\uff99\030\uff99\032\uff99\033\uff99\035\uff99\001\002\000" +
    "\046\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97" +
    "\014\uff97\016\uff97\017\uff97\020\uff97\021\uff97\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\032\uff97\033\uff97\035\uff97\001\002" +
    "\000\022\012\107\013\104\027\100\034\101\036\105\053" +
    "\102\054\111\055\103\001\002\000\052\004\130\005\120" +
    "\006\122\007\116\010\134\011\126\013\143\014\uffad\015" +
    "\141\016\uffad\017\132\020\117\021\112\025\115\026\125" +
    "\027\131\030\uffad\032\uffad\033\uffad\035\127\001\002\000" +
    "\004\030\047\001\002\000\022\012\107\013\104\027\100" +
    "\034\101\036\105\053\102\054\111\055\103\001\002\000" +
    "\046\004\130\005\120\006\122\007\116\010\134\011\126" +
    "\014\uffad\016\uffad\017\132\020\117\021\112\025\115\026" +
    "\125\027\131\030\uffad\032\uffad\033\uffad\035\127\001\002" +
    "\000\046\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\011" +
    "\uff98\014\uff98\016\uff98\017\uff98\020\uff98\021\uff98\025\uff98" +
    "\026\uff98\027\uff98\030\uff98\032\uff98\033\uff98\035\uff98\001" +
    "\002\000\022\012\uff9b\013\uff9b\027\uff9b\034\uff9b\036\uff9b" +
    "\053\uff9b\054\uff9b\055\uff9b\001\002\000\022\012\107\013" +
    "\104\027\100\034\101\036\105\053\102\054\111\055\103" +
    "\001\002\000\022\012\uffa8\013\uffa8\027\uffa8\034\uffa8\036" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\001\002\000\022\012\uffa6" +
    "\013\uffa6\027\uffa6\034\uffa6\036\uffa6\053\uffa6\054\uffa6\055" +
    "\uffa6\001\002\000\022\012\uff9e\013\uff9e\027\uff9e\034\uff9e" +
    "\036\uff9e\053\uff9e\054\uff9e\055\uff9e\001\002\000\022\012" +
    "\uff9a\013\uff9a\027\uff9a\034\uff9a\036\uff9a\053\uff9a\054\uff9a" +
    "\055\uff9a\001\002\000\022\012\uffa0\013\uffa0\027\uffa0\034" +
    "\uffa0\036\uffa0\053\uffa0\054\uffa0\055\uffa0\001\002\000\022" +
    "\012\uffa9\013\uffa9\027\uffa9\034\uffa9\036\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\001\002\000\022\012\uff9f\013\uff9f\027\uff9f" +
    "\034\uff9f\036\uff9f\053\uff9f\054\uff9f\055\uff9f\001\002\000" +
    "\022\012\uffaa\013\uffaa\027\uffaa\034\uffaa\036\uffaa\053\uffaa" +
    "\054\uffaa\055\uffaa\001\002\000\022\012\uffa7\013\uffa7\027" +
    "\uffa7\034\uffa7\036\uffa7\053\uffa7\054\uffa7\055\uffa7\001\002" +
    "\000\022\012\uffa4\013\uffa4\027\uffa4\034\uffa4\036\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\001\002\000\022\012\uffa2\013\uffa2" +
    "\027\uffa2\034\uffa2\036\uffa2\053\uffa2\054\uffa2\055\uffa2\001" +
    "\002\000\022\012\uffa3\013\uffa3\027\uffa3\034\uffa3\036\uffa3" +
    "\053\uffa3\054\uffa3\055\uffa3\001\002\000\022\012\uffa1\013" +
    "\uffa1\027\uffa1\034\uffa1\036\uffa1\053\uffa1\054\uffa1\055\uffa1" +
    "\001\002\000\022\012\uffa5\013\uffa5\027\uffa5\034\uffa5\036" +
    "\uffa5\053\uffa5\054\uffa5\055\uffa5\001\002\000\022\012\uff9d" +
    "\013\uff9d\027\uff9d\034\uff9d\036\uff9d\053\uff9d\054\uff9d\055" +
    "\uff9d\001\002\000\046\004\uffb2\005\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\011\uffb2\014\uffb2\016\uffb2\017\uffb2\020\uffb2\021" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\032\uffb2\033\uffb2" +
    "\035\uffb2\001\002\000\022\012\uff9c\013\uff9c\027\uff9c\034" +
    "\uff9c\036\uff9c\053\uff9c\054\uff9c\055\uff9c\001\002\000\046" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\014" +
    "\uffae\016\uffae\017\uffae\020\uffae\021\uffae\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\032\uffae\033\uffae\035\uffae\001\002\000" +
    "\046\004\130\005\120\006\122\007\116\010\134\011\126" +
    "\014\uffad\016\uffad\017\132\020\117\021\112\025\115\026" +
    "\125\027\131\030\uffad\032\uffad\033\uffad\035\127\001\002" +
    "\000\046\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\014\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\032\uffb0\033\uffb0\035\uffb0\001" +
    "\002\000\030\030\uffcd\031\uffcd\033\uffcd\034\uffcd\036\uffcd" +
    "\041\uffcd\044\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\001" +
    "\002\000\022\012\107\013\104\027\100\034\101\036\105" +
    "\053\102\054\111\055\103\001\002\000\046\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\014\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\032\uffb7\033\uffb7\035\uffb7\001\002\000\024\012\107" +
    "\013\104\014\uffba\027\100\034\101\036\105\053\102\054" +
    "\111\055\103\001\002\000\006\014\uffb8\032\150\001\002" +
    "\000\004\014\146\001\002\000\046\004\130\005\120\006" +
    "\122\007\116\010\134\011\126\014\uffad\016\uffad\017\132" +
    "\020\117\021\112\025\115\026\125\027\131\030\uffad\032" +
    "\uffad\033\uffad\035\127\001\002\000\046\004\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\011\uffb5\014\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\032\uffb5\033\uffb5\035\uffb5\001\002\000\022\012\107\013" +
    "\104\027\100\034\101\036\105\053\102\054\111\055\103" +
    "\001\002\000\004\014\uffbb\001\002\000\006\014\uffb8\032" +
    "\150\001\002\000\004\014\uffb9\001\002\000\004\016\155" +
    "\001\002\000\046\004\130\005\120\006\122\007\116\010" +
    "\134\011\126\014\uffad\016\uffad\017\132\020\117\021\112" +
    "\025\115\026\125\027\131\030\uffad\032\uffad\033\uffad\035" +
    "\127\001\002\000\046\004\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\010\uffb6\011\uffb6\014\uffb6\016\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\032\uffb6\033\uffb6" +
    "\035\uffb6\001\002\000\004\014\160\001\002\000\046\004" +
    "\130\005\120\006\122\007\116\010\134\011\126\014\uffad" +
    "\016\uffad\017\132\020\117\021\112\025\115\026\125\027" +
    "\131\030\uffad\032\uffad\033\uffad\035\127\001\002\000\046" +
    "\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\014" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\032\uffaf\033\uffaf\035\uffaf\001\002\000" +
    "\004\056\163\001\002\000\004\032\164\001\002\000\012" +
    "\037\165\040\020\043\013\046\012\001\002\000\006\014" +
    "\uffbf\032\167\001\002\000\006\014\uffbf\032\167\001\002" +
    "\000\024\012\107\013\104\027\100\034\101\036\105\053" +
    "\102\054\111\055\103\056\172\001\002\000\004\014\171" +
    "\001\002\000\046\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010" +
    "\uffb4\011\uffb4\014\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\025\uffb4\026\uffb4\027\uffb4\030\uffb4\032\uffb4\033\uffb4\035" +
    "\uffb4\001\002\000\006\014\uffab\032\uffab\001\002\000\006" +
    "\014\uffbc\032\176\001\002\000\004\014\uffc0\001\002\000" +
    "\006\014\uffac\032\uffac\001\002\000\024\012\107\013\104" +
    "\027\100\034\101\036\105\053\102\054\111\055\103\056" +
    "\172\001\002\000\004\014\uffbe\001\002\000\004\014\uffbd" +
    "\001\002\000\004\014\202\001\002\000\046\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\014\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\025\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\032\uffb3\033\uffb3\035\uffb3\001\002\000\046\004\130" +
    "\005\120\006\122\007\116\010\134\011\126\014\uffad\016" +
    "\uffad\017\132\020\117\021\112\025\115\026\125\027\131" +
    "\030\uffad\032\uffad\033\uffad\035\127\001\002\000\046\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\014\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\032\uffb1\033\uffb1\035\uffb1\001\002\000\030" +
    "\030\uffcb\031\uffcb\033\uffcb\034\uffcb\036\uffcb\041\uffcb\044" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\001\002\000\004" +
    "\031\uffdd\001\002\000\010\022\215\023\216\024\220\001" +
    "\002\000\024\012\107\013\104\014\uffba\027\100\034\101" +
    "\036\105\053\102\054\111\055\103\001\002\000\022\012" +
    "\107\013\104\027\100\034\101\036\105\053\102\054\111" +
    "\055\103\001\002\000\004\016\213\001\002\000\010\022" +
    "\uffd8\023\uffd8\024\uffd8\001\002\000\010\022\215\023\216" +
    "\024\220\001\002\000\022\012\uffc2\013\uffc2\027\uffc2\034" +
    "\uffc2\036\uffc2\053\uffc2\054\uffc2\055\uffc2\001\002\000\022" +
    "\012\uffc1\013\uffc1\027\uffc1\034\uffc1\036\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\001\002\000\022\012\107\013\104\027\100" +
    "\034\101\036\105\053\102\054\111\055\103\001\002\000" +
    "\022\012\uffc3\013\uffc3\027\uffc3\034\uffc3\036\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\001\002\000\004\033\222\001\002\000" +
    "\030\030\uffd7\031\uffd7\033\uffd7\034\uffd7\036\uffd7\041\uffd7" +
    "\044\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\001\002\000" +
    "\004\014\224\001\002\000\004\033\uffd4\001\002\000\004" +
    "\033\226\001\002\000\030\030\uffd3\031\uffd3\033\uffd3\034" +
    "\uffd3\036\uffd3\041\uffd3\044\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\001\002\000\022\012\107\013\104\027\100\034" +
    "\101\036\105\053\102\054\111\055\103\001\002\000\004" +
    "\033\231\001\002\000\030\030\uffd5\031\uffd5\033\uffd5\034" +
    "\uffd5\036\uffd5\041\uffd5\044\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\001\002\000\004\031\233\001\002\000\042\030" +
    "\uffe0\031\uffe0\033\uffe0\034\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\001\002\000\004\024\uffcf\001\002" +
    "\000\004\024\236\001\002\000\022\012\107\013\104\027" +
    "\100\034\101\036\105\053\102\054\111\055\103\001\002" +
    "\000\004\032\240\001\002\000\022\012\107\013\104\027" +
    "\100\034\101\036\105\053\102\054\111\055\103\001\002" +
    "\000\004\030\047\001\002\000\030\030\uffce\031\uffce\033" +
    "\uffce\034\uffce\036\uffce\041\uffce\044\uffce\047\uffce\050\uffce" +
    "\051\uffce\052\uffce\001\002\000\022\012\107\013\104\027" +
    "\100\034\101\036\105\053\102\054\111\055\103\001\002" +
    "\000\004\014\245\001\002\000\004\030\047\001\002\000" +
    "\032\030\uffc4\031\uffc4\033\uffc4\034\uffc4\036\uffc4\041\uffc4" +
    "\044\uffc4\045\250\047\uffc4\050\uffc4\051\uffc4\052\uffc4\001" +
    "\002\000\030\030\uffd0\031\uffd0\033\uffd0\034\uffd0\036\uffd0" +
    "\041\uffd0\044\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\001" +
    "\002\000\004\030\047\001\002\000\030\030\uffc5\031\uffc5" +
    "\033\uffc5\034\uffc5\036\uffc5\041\uffc5\044\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\001\002\000\030\030\uffca\031\uffca" +
    "\033\uffca\034\uffca\036\uffca\041\uffca\044\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\001\002\000\004\033\255\001\002" +
    "\000\004\033\uffc7\001\002\000\030\030\uffcc\031\uffcc\033" +
    "\uffcc\034\uffcc\036\uffcc\041\uffcc\044\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\052\uffcc\001\002\000\004\056\257\001\002\000" +
    "\004\032\260\001\002\000\012\037\261\040\020\043\013" +
    "\046\012\001\002\000\006\014\uffbf\032\167\001\002\000" +
    "\006\014\uffbf\032\167\001\002\000\004\014\264\001\002" +
    "\000\030\030\uffd2\031\uffd2\033\uffd2\034\uffd2\036\uffd2\041" +
    "\uffd2\044\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\001\002" +
    "\000\004\014\266\001\002\000\030\030\uffd1\031\uffd1\033" +
    "\uffd1\034\uffd1\036\uffd1\041\uffd1\044\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\001\002\000\006\014\uffe8\032\uffe8\001" +
    "\002\000\006\014\uffe3\032\271\001\002\000\010\040\020" +
    "\043\013\046\012\001\002\000\004\014\uffe7\001\002\000" +
    "\004\036\274\001\002\000\006\014\uffe5\032\uffe5\001\002" +
    "\000\006\014\uffe3\032\271\001\002\000\004\014\uffe4\001" +
    "\002\000\004\016\300\001\002\000\006\032\ufffa\033\ufffa" +
    "\001\002\000\006\032\030\033\uffe9\001\002\000\004\033" +
    "\ufff9\001\002\000\014\031\uffee\037\014\040\020\043\013" +
    "\046\012\001\002\000\004\031\ufffc\001\002\000\004\013" +
    "\ufff2\001\002\000\004\013\307\001\002\000\012\014\uffe6" +
    "\040\020\043\013\046\012\001\002\000\004\014\311\001" +
    "\002\000\004\030\ufff1\001\002\000\004\030\047\001\002" +
    "\000\014\031\ufff0\037\ufff0\040\ufff0\043\ufff0\046\ufff0\001" +
    "\002\000\014\031\uffee\037\014\040\020\043\013\046\012" +
    "\001\002\000\004\031\uffef\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\314\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\037\005\001\001\000\002\001\001\000\004\040\007" +
    "\001\001\000\002\001\001\000\012\003\014\012\020\032" +
    "\016\036\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\026\044" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\033\001\001\000\002\001\001\000\004\033\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\037\001\001\000\004\033\040\001\001\000\002\001\001" +
    "\000\006\034\043\036\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\045\001\001\000\004\004\047" +
    "\001\001\000\004\056\054\001\001\000\004\046\050\001" +
    "\001\000\006\012\052\036\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\025\001\001\000\010\003" +
    "\056\011\055\036\057\001\001\000\010\004\066\005\073" +
    "\013\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\026\001\001\000\010\003\056\011\062\036\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\253\014\252\021\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\231\001\001\000\004\061\206\001\001\000\010\004\066" +
    "\005\073\013\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\105\021\107\001\001\000\006\007\202" +
    "\021\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\156\021\107\001\001\000\016" +
    "\022\112\023\122\024\120\025\113\026\123\027\141\001" +
    "\001\000\004\004\137\001\001\000\006\007\135\021\107" +
    "\001\001\000\016\022\112\023\122\024\120\025\113\026" +
    "\123\027\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\134\021\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\112\023\122\024\120\025\113\026" +
    "\123\027\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\153\021\107\001\001\000\002\001\001\000" +
    "\010\007\143\016\144\021\107\001\001\000\004\031\150" +
    "\001\001\000\002\001\001\000\016\022\112\023\122\024" +
    "\120\025\113\026\123\027\146\001\001\000\002\001\001" +
    "\000\006\007\151\021\107\001\001\000\002\001\001\000" +
    "\004\031\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\112\023\122\024\120\025\113\026\123\027" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\022\112\023\122\024\120\025\113\026\123\027\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\165\001\001\000\004\017\200\001\001\000" +
    "\004\017\167\001\001\000\012\007\174\010\172\020\173" +
    "\021\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\174\010\172\020\177\021" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\022\112\023\122\024" +
    "\120\025\113\026\123\027\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\226\001" +
    "\001\000\010\007\143\016\222\021\107\001\001\000\006" +
    "\007\211\021\107\001\001\000\002\001\001\000\004\060" +
    "\213\001\001\000\004\006\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\220\021\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\227\021\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\234\001\001\000\002\001\001\000\006" +
    "\007\236\021\107\001\001\000\002\001\001\000\006\007" +
    "\240\021\107\001\001\000\004\004\241\001\001\000\002" +
    "\001\001\000\006\007\243\021\107\001\001\000\002\001" +
    "\001\000\004\004\245\001\001\000\004\015\246\001\001" +
    "\000\002\001\001\000\004\004\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\261\001\001\000\004\017\264\001\001\000\004" +
    "\017\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\267\001\001" +
    "\000\004\035\271\001\001\000\004\036\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\274\001\001" +
    "\000\004\035\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\300\001\001\000\004\033\301\001\001" +
    "\000\002\001\001\000\012\003\014\012\020\032\303\036" +
    "\015\001\001\000\002\001\001\000\004\047\305\001\001" +
    "\000\002\001\001\000\006\034\307\036\042\001\001\000" +
    "\002\001\001\000\004\050\311\001\001\000\004\004\312" +
    "\001\001\000\004\051\313\001\001\000\006\012\314\036" +
    "\051\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public static void main(String[] args){
    try {
      /* Loading the file*/
      FileInputStream file = new FileInputStream(args[0]);/**/
      /* Create lexer analizer with file*/
      yylex lex = new yylex(file);
      /* Create parser analyzer with lex*/  
      parser par = new parser(lex);
      /* Analize file */
      par.setScanner(lex);
      par.parse();
    }catch(Exception x){
      x.printStackTrace();
      System.out.println("Error fatal.\n"); 
    }
  }
  
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error");
    System.out.println("Mensaje: "+message);
    System.out.println("info: "+info.toString());
    if(info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
        /* Comprueba si el numero de línea es mayor o igual que cero */
        if(s.left >= 0) {
	        m.append(" en linea "+(s.left+1));
	        /*Comprueba si el numero de columna es mayoro igual que cero */
	        if (s.right >= 0)
	            m.append(", y columna "+(s.right+1));
	        }
        }
    m.append(" : "+message);
    System.err.println(m);
  }
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  static symbolTable table = new symbolTable();
  static LinkedList<absSymbol>  declList = new LinkedList<absSymbol>();
  static LinkedList<absSymbol>  parList = new LinkedList<absSymbol>();
  private LinkedList<absSymbol> setType(LinkedList<absSymbol> symbolList, String type) {
    for (int i = 0 ; i < symbolList.size() ; i++) {
        symbolList.get(i).type = type;
    }
    return symbolList;
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // literal ::= BOOLEAN 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // literal ::= FLOAT 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // literal ::= INT 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // cond_op ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // cond_op ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // eq_op ::= NOT_EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eq_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // eq_op ::= EQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("eq_op",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // rel_op ::= GREATER_EQ_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // rel_op ::= LESS_EQ_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // rel_op ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // rel_op ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // arith_op ::= MODULE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // arith_op ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arith_op ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arith_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // arith_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // bin_op ::= cond_op 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // bin_op ::= eq_op 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bin_op ::= rel_op 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bin_op ::= arith_op 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // externinvk_arg ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // externinvk_arg ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr_ ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr_ ::= bin_op expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= LPAR expr RPAR expr_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= NOT expr expr_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= MINUS expr expr_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= literal expr_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= WEXTERNINVK LPAR STRING_LITERAL COMMA WVOID arg_invoc RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= WEXTERNINVK LPAR STRING_LITERAL COMMA type arg_invoc RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= ID LPAR expr_parameters RPAR expr_ 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		if (table.search(i) == null) 
                                                                    parser.report_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= ID LC expr RC expr_ 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		if (table.search(i) == null) 
                                                                    parser.report_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= ID expr_ 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if (table.search(i) == null) 
                                                                    parser.report_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr_parameters_ ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_parameters_",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr_parameters_ ::= COMMA expr expr_parameters_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_parameters_",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_parameters ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_parameters ::= expr expr_parameters_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // set_externinvk_arg_ ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_externinvk_arg_",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // set_externinvk_arg_ ::= COMMA set_externinvk_arg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_externinvk_arg_",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // set_externinvk_arg ::= externinvk_arg set_externinvk_arg_ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_externinvk_arg",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arg_invoc ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_invoc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arg_invoc ::= COMMA set_externinvk_arg 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_invoc",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assign_op ::= ASSIGN_DEC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assign_op ::= ASSIGN_INC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assign_op ::= ASSIGN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // else_block ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // else_block ::= WELSE block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_block",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_return ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_return",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_return ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_return",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement ::= block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statement ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statement ::= WCONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statement ::= WBREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement ::= WRETURN expr_return SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // statement ::= WWHILE expr block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // statement ::= WFOR ID NT$20 ASSIGN expr COMMA expr block 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$20 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if (table.search(i) == null) 
                                                            parser.report_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // statement ::= WIF LPAR expr RPAR block else_block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // statement ::= WEXTERNINVK LPAR STRING_LITERAL COMMA WVOID arg_invoc RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // statement ::= WEXTERNINVK LPAR STRING_LITERAL COMMA type arg_invoc RPAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= ID LPAR expr_parameters RPAR NT$19 SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$19 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
if (table.search(i) == null) 
                                                            parser.report_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= ID NT$18 assign_op expr SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$18 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if (table.search(i) == null) 
                                                            parser.report_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= ID LC expr RC NT$17 assign_op expr SEMICOLON 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$17 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if (table.search(i) == null) 
                                                            parser.report_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= WINT 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= WBOOLEAN 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= WFLOAT 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = w;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // set_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // set_statement ::= statement set_statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // set_field_decl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_field_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // set_field_decl ::= field_decl SEMICOLON set_field_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_field_decl",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // block ::= LLL NT$15 set_field_decl set_statement NT$16 RLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$16 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
table.deleteLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$15 ::= 
            {
              Object RESULT =null;
table.insertLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // set_type_id ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		RESULT = (LinkedList<absSymbol>)parList.clone();
                                            parList.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_type_id",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // set_type_id ::= COMMA type ID NT$14 set_type_id 
            {
              LinkedList<absSymbol> RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (LinkedList<absSymbol>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_type_id",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$14 ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parList.add(new simpleSymbol(i, null, t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameters ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		RESULT = (LinkedList<absSymbol>)parList.clone();
                                            parList.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameters ::= type ID NT$13 set_type_id 
            {
              LinkedList<absSymbol> RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (LinkedList<absSymbol>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$13 ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parList.add(new simpleSymbol(i, null, t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // set_complete_id ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		RESULT = (LinkedList<absSymbol>)declList.clone();
                                                declList.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_complete_id",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // set_complete_id ::= COMMA ID LC INT RC NT$12 set_complete_id 
            {
              LinkedList<absSymbol> RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (LinkedList<absSymbol>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_complete_id",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$12 ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
declList.add(new arraySymbol(i, null, il, null));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // set_complete_id ::= COMMA ID NT$11 set_complete_id 
            {
              LinkedList<absSymbol> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (LinkedList<absSymbol>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_complete_id",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$11 ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
declList.add(new simpleSymbol(i, null, null));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // set_method_decl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_method_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // set_method_decl ::= WVOID ID NT$8 LPAR parameters RPAR NT$9 block NT$10 set_method_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_method_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
table.deleteLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if (p != null) {
                                                    ((functionSymbol)table.search(i)).parameters = p;
                                                 }
                                                 if (table.insertSymbolList(p)==null)
                                                    parser.report_error("ID ya difinido: ",p.toString());
                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$8 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
functionSymbol f = new functionSymbol(i, t, null);
                                        if (table.insertSymbol(f) == null) {
                                                parser.report_error("ID ya difinido: ",i);
                                        }
                                        table.insertLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // set_method_decl ::= type ID NT$5 LPAR parameters RPAR NT$6 block NT$7 set_method_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_method_decl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
table.deleteLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if (p != null) {
                                                    ((functionSymbol)table.search(i)).parameters = p;
                                                 }
                                                 if (table.insertSymbolList(p)==null)
                                                    parser.report_error("ID ya difinido: ",p.toString());
                                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$5 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
functionSymbol f = new functionSymbol(i, t, null);
                                     if (table.insertSymbol(f) == null) {
                                        parser.report_error("ID ya difinido: ",i);
                                     }
                                     table.insertLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // field_decl ::= type ID NT$4 set_complete_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (table.insertSymbolList(setType(s, t)) == null)
                                                        parser.report_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if (table.insertSymbol(new simpleSymbol(i, null, t)) == null)
                                                        parser.report_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_decl ::= type ID LC INT RC NT$3 set_complete_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (table.insertSymbolList(setType(s, t)) == null)
                                                        parser.report_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if (table.insertSymbol(new arraySymbol(i, t, il, null)) == null)
                                                        parser.report_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // set_decl ::= set_method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_decl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // set_decl ::= field_decl SEMICOLON set_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_decl",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= WCLASS NT$0 ID NT$1 LLL set_decl NT$2 RLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
table.deleteLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if (table.insertSymbol(new simpleSymbol(i, null, "Class")) == null)
                                                                parser.report_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
table.insertLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

