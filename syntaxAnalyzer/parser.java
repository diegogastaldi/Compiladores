
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 14 23:49:32 ART 2014
//----------------------------------------------------

package compiler2014;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import ir.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 14 23:49:32 ART 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\037\002\000\002\040" +
    "\002\000\002\041\002\000\002\002\012\000\002\006\005" +
    "\000\002\006\003\000\002\042\002\000\002\003\011\000" +
    "\002\043\002\000\002\003\006\000\002\004\005\000\002" +
    "\004\002\000\002\044\002\000\002\045\002\000\002\046" +
    "\002\000\002\005\014\000\002\047\002\000\002\050\002" +
    "\000\002\051\002\000\002\005\014\000\002\005\002\000" +
    "\002\052\002\000\002\017\006\000\002\053\002\000\002" +
    "\017\011\000\002\017\002\000\002\054\002\000\002\020" +
    "\006\000\002\020\002\000\002\055\002\000\002\021\007" +
    "\000\002\021\002\000\002\025\006\000\002\025\004\000" +
    "\002\025\003\000\002\056\002\000\002\025\012\000\002" +
    "\025\005\000\002\025\004\000\002\025\004\000\002\025" +
    "\004\000\002\025\003\000\002\025\003\000\002\012\006" +
    "\000\002\012\011\000\002\012\011\000\002\027\004\000" +
    "\002\027\003\000\002\030\011\000\002\030\007\000\002" +
    "\014\004\000\002\014\002\000\002\015\005\000\002\015" +
    "\002\000\002\026\004\000\002\026\002\000\002\057\002" +
    "\000\002\060\002\000\002\016\010\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\004\000\002" +
    "\023\004\000\002\023\005\000\002\023\005\000\002\011" +
    "\011\000\002\011\011\000\002\011\006\000\002\007\005" +
    "\000\002\007\002\000\002\010\003\000\002\010\003\000" +
    "\002\013\003\000\002\013\006\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\003\000\002\035\003" +
    "\000\002\036\003\000\002\036\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\020\005\001\002\000\004\002\277\001" +
    "\002\000\004\014\000\001\002\000\004\014\007\001\002" +
    "\000\004\010\uffff\001\002\000\004\010\011\001\002\000" +
    "\014\011\uffec\015\014\016\020\021\013\024\012\001\002" +
    "\000\010\005\uffb5\012\uffb5\014\uffb5\001\002\000\010\005" +
    "\uffb3\012\uffb3\014\uffb3\001\002\000\004\014\266\001\002" +
    "\000\004\013\264\001\002\000\004\014\024\001\002\000" +
    "\004\011\ufffe\001\002\000\010\005\uffb4\012\uffb4\014\uffb4" +
    "\001\002\000\004\011\ufffb\001\002\000\004\011\023\001" +
    "\002\000\004\002\ufffd\001\002\000\012\004\ufff4\006\025" +
    "\012\ufff8\013\ufff8\001\002\000\004\050\260\001\002\000" +
    "\004\004\042\001\002\000\006\012\030\013\uffe7\001\002" +
    "\000\004\014\032\001\002\000\004\013\ufff7\001\002\000" +
    "\010\006\033\012\uffeb\013\uffeb\001\002\000\004\050\036" +
    "\001\002\000\006\012\030\013\uffe7\001\002\000\004\013" +
    "\uffea\001\002\000\004\007\037\001\002\000\006\012\uffe9" +
    "\013\uffe9\001\002\000\006\012\030\013\uffe7\001\002\000" +
    "\004\013\uffe8\001\002\000\012\005\uffe4\016\020\021\013" +
    "\024\012\001\002\000\004\014\250\001\002\000\004\005" +
    "\045\001\002\000\004\010\ufff3\001\002\000\004\010\047" +
    "\001\002\000\036\010\uffc8\011\uffc8\013\uffc8\014\uffc8\016" +
    "\uffc8\017\uffc8\021\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\001\002\000\014\011\ufff2\015" +
    "\ufff2\016\ufff2\021\ufff2\024\ufff2\001\002\000\014\011\uffec" +
    "\015\014\016\020\021\013\024\012\001\002\000\004\014" +
    "\054\001\002\000\004\011\ufff1\001\002\000\004\004\ufff4" +
    "\001\002\000\036\010\ufff5\011\ufff5\013\ufff5\014\ufff5\016" +
    "\020\017\ufff5\021\013\022\ufff5\024\012\025\ufff5\026\ufff5" +
    "\027\ufff5\030\ufff5\031\ufff5\001\002\000\030\010\047\011" +
    "\uffc9\013\100\014\076\017\101\022\067\025\072\026\073" +
    "\027\066\030\103\031\064\001\002\000\004\013\062\001" +
    "\002\000\004\014\061\001\002\000\010\006\025\012\ufff8" +
    "\013\ufff8\001\002\000\036\010\ufff5\011\ufff5\013\ufff5\014" +
    "\ufff5\016\020\017\ufff5\021\013\022\ufff5\024\012\025\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\001\002\000\030\010" +
    "\ufff6\011\ufff6\013\ufff6\014\ufff6\017\ufff6\022\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\001\002\000\004\004" +
    "\237\001\002\000\030\010\uffde\011\uffde\013\uffde\014\uffde" +
    "\017\uffde\022\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031" +
    "\uffde\001\002\000\024\004\111\013\uffd1\014\112\031\105" +
    "\040\104\047\113\050\107\051\117\052\110\001\002\000" +
    "\004\013\235\001\002\000\030\010\uffd6\011\uffd6\013\uffd6" +
    "\014\uffd6\017\uffd6\022\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\001\002\000\004\013\234\001\002\000\004" +
    "\014\225\001\002\000\004\004\217\001\002\000\004\011" +
    "\uffc7\001\002\000\004\013\214\001\002\000\014\004\211" +
    "\006\146\054\uffb7\055\uffb7\056\uffb7\001\002\000\030\010" +
    "\047\011\uffc9\013\100\014\076\017\101\022\067\025\072" +
    "\026\073\027\066\030\103\031\064\001\002\000\030\010" +
    "\uffd7\011\uffd7\013\uffd7\014\uffd7\017\uffd7\022\uffd7\025\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\001\002\000\004\013" +
    "\207\001\002\000\010\054\201\055\202\056\204\001\002" +
    "\000\022\004\111\014\112\031\105\040\104\047\113\050" +
    "\107\051\117\052\110\001\002\000\022\004\111\014\112" +
    "\031\105\040\104\047\113\050\107\051\117\052\110\001" +
    "\002\000\004\004\162\001\002\000\046\005\uffc4\007\uffc4" +
    "\010\uffc4\012\uffc4\013\uffc4\032\uffc4\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\001\002\000\046\005\uff9e\007" +
    "\uff9e\010\uff9e\012\uff9e\013\uff9e\032\uff9e\033\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\001\002\000\046\005\uff9c" +
    "\007\uff9c\010\uff9c\012\uff9c\013\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\044\uff9c\045\uff9c\046\uff9c\001\002\000\022\004" +
    "\111\014\112\031\105\040\104\047\113\050\107\051\117" +
    "\052\110\001\002\000\052\004\145\005\uffb7\006\146\007" +
    "\uffb7\010\uffb7\012\uffb7\013\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\001\002\000\022\004\111" +
    "\014\112\031\105\040\104\047\113\050\107\051\117\052" +
    "\110\001\002\000\036\010\047\032\137\033\126\034\130" +
    "\035\123\036\124\037\134\040\140\041\125\042\120\043" +
    "\141\044\142\045\135\046\136\001\002\000\046\005\uffc3" +
    "\007\uffc3\010\uffc3\012\uffc3\013\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3" +
    "\043\uffc3\044\uffc3\045\uffc3\046\uffc3\001\002\000\046\005" +
    "\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\001\002\000\046" +
    "\005\uff9d\007\uff9d\010\uff9d\012\uff9d\013\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\001\002\000" +
    "\022\004\uffa0\014\uffa0\031\uffa0\040\uffa0\047\uffa0\050\uffa0" +
    "\051\uffa0\052\uffa0\001\002\000\022\004\111\014\112\031" +
    "\105\040\104\047\113\050\107\051\117\052\110\001\002" +
    "\000\022\004\uffad\014\uffad\031\uffad\040\uffad\047\uffad\050" +
    "\uffad\051\uffad\052\uffad\001\002\000\022\004\uffa3\014\uffa3" +
    "\031\uffa3\040\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\001" +
    "\002\000\022\004\uffab\014\uffab\031\uffab\040\uffab\047\uffab" +
    "\050\uffab\051\uffab\052\uffab\001\002\000\022\004\uff9f\014" +
    "\uff9f\031\uff9f\040\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f" +
    "\001\002\000\022\004\uffa5\014\uffa5\031\uffa5\040\uffa5\047" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\001\002\000\022\004\uffae" +
    "\014\uffae\031\uffae\040\uffae\047\uffae\050\uffae\051\uffae\052" +
    "\uffae\001\002\000\022\004\uffa4\014\uffa4\031\uffa4\040\uffa4" +
    "\047\uffa4\050\uffa4\051\uffa4\052\uffa4\001\002\000\030\010" +
    "\uffdb\011\uffdb\013\uffdb\014\uffdb\017\uffdb\022\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\001\002\000\022\004" +
    "\uffaf\014\uffaf\031\uffaf\040\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\001\002\000\022\004\uffac\014\uffac\031\uffac\040" +
    "\uffac\047\uffac\050\uffac\051\uffac\052\uffac\001\002\000\022" +
    "\004\uffa9\014\uffa9\031\uffa9\040\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\001\002\000\022\004\uffa7\014\uffa7\031\uffa7" +
    "\040\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\001\002\000" +
    "\022\004\uffa8\014\uffa8\031\uffa8\040\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\001\002\000\022\004\uffa6\014\uffa6\031" +
    "\uffa6\040\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\001\002" +
    "\000\022\004\uffaa\014\uffaa\031\uffaa\040\uffaa\047\uffaa\050" +
    "\uffaa\051\uffaa\052\uffaa\001\002\000\022\004\uffa2\014\uffa2" +
    "\031\uffa2\040\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\001" +
    "\002\000\022\004\uffa1\014\uffa1\031\uffa1\040\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\052\uffa1\001\002\000\046\005\uffbf\007" +
    "\uffbf\010\uffbf\012\uffbf\013\uffbf\032\137\033\126\034\130" +
    "\035\123\036\124\037\134\040\140\041\125\042\120\043" +
    "\141\044\142\045\135\046\136\001\002\000\046\005\uffc1" +
    "\007\uffc1\010\uffc1\012\uffc1\013\uffc1\032\137\033\126\034" +
    "\130\035\123\036\124\037\134\040\140\041\125\042\uffc1" +
    "\043\uffc1\044\uffc1\045\135\046\136\001\002\000\024\004" +
    "\111\005\uffcd\014\112\031\105\040\104\047\113\050\107" +
    "\051\117\052\110\001\002\000\022\004\111\014\112\031" +
    "\105\040\104\047\113\050\107\051\117\052\110\001\002" +
    "\000\036\007\150\032\137\033\126\034\130\035\123\036" +
    "\124\037\134\040\140\041\125\042\120\043\141\044\142" +
    "\045\135\046\136\001\002\000\054\005\uffb6\007\uffb6\010" +
    "\uffb6\012\uffb6\013\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\054\uffb6\055\uffb6\056\uffb6\001\002" +
    "\000\040\005\uffcb\012\155\032\137\033\126\034\130\035" +
    "\123\036\124\037\134\040\140\041\125\042\120\043\141" +
    "\044\142\045\135\046\136\001\002\000\004\005\153\001" +
    "\002\000\046\005\uffbc\007\uffbc\010\uffbc\012\uffbc\013\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\001\002\000\004\005\uffce\001\002\000\022\004\111\014" +
    "\112\031\105\040\104\047\113\050\107\051\117\052\110" +
    "\001\002\000\040\005\uffcb\012\155\032\137\033\126\034" +
    "\130\035\123\036\124\037\134\040\140\041\125\042\120" +
    "\043\141\044\142\045\135\046\136\001\002\000\004\005" +
    "\uffcc\001\002\000\036\005\161\032\137\033\126\034\130" +
    "\035\123\036\124\037\134\040\140\041\125\042\120\043" +
    "\141\044\142\045\135\046\136\001\002\000\046\005\uffc0" +
    "\007\uffc0\010\uffc0\012\uffc0\013\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\001\002\000\004\053" +
    "\163\001\002\000\004\012\164\001\002\000\012\015\165" +
    "\016\020\021\013\024\012\001\002\000\006\005\uffba\012" +
    "\167\001\002\000\006\005\uffba\012\167\001\002\000\024" +
    "\004\111\014\112\031\105\040\104\047\113\050\107\051" +
    "\117\052\110\053\172\001\002\000\004\005\171\001\002" +
    "\000\046\005\uffbe\007\uffbe\010\uffbe\012\uffbe\013\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\001" +
    "\002\000\006\005\uffb8\012\uffb8\001\002\000\006\005\uffba" +
    "\012\167\001\002\000\040\005\uffb9\012\uffb9\032\137\033" +
    "\126\034\130\035\123\036\124\037\134\040\140\041\125" +
    "\042\120\043\141\044\142\045\135\046\136\001\002\000" +
    "\004\005\uffbb\001\002\000\004\005\177\001\002\000\046" +
    "\005\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\001\002\000" +
    "\046\005\uffc2\007\uffc2\010\uffc2\012\uffc2\013\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\134\040\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\135\046\136\001\002" +
    "\000\022\004\uffb1\014\uffb1\031\uffb1\040\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\001\002\000\022\004\uffb0\014\uffb0" +
    "\031\uffb0\040\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\001" +
    "\002\000\022\004\111\014\112\031\105\040\104\047\113" +
    "\050\107\051\117\052\110\001\002\000\022\004\uffb2\014" +
    "\uffb2\031\uffb2\040\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\001\002\000\036\013\206\032\137\033\126\034\130\035" +
    "\123\036\124\037\134\040\140\041\125\042\120\043\141" +
    "\044\142\045\135\046\136\001\002\000\030\010\uffe0\011" +
    "\uffe0\013\uffe0\014\uffe0\017\uffe0\022\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\001\002\000\030\010\uffd9\011" +
    "\uffd9\013\uffd9\014\uffd9\017\uffd9\022\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\001\002\000\004\011\uffca\001" +
    "\002\000\024\004\111\005\uffcd\014\112\031\105\040\104" +
    "\047\113\050\107\051\117\052\110\001\002\000\004\005" +
    "\213\001\002\000\004\013\uffd5\001\002\000\030\010\uffdf" +
    "\011\uffdf\013\uffdf\014\uffdf\017\uffdf\022\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\001\002\000\004\011\216" +
    "\001\002\000\042\010\uffc6\011\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\001\002\000" +
    "\022\004\111\014\112\031\105\040\104\047\113\050\107" +
    "\051\117\052\110\001\002\000\036\005\221\032\137\033" +
    "\126\034\130\035\123\036\124\037\134\040\140\041\125" +
    "\042\120\043\141\044\142\045\135\046\136\001\002\000" +
    "\004\010\047\001\002\000\032\010\uffcf\011\uffcf\013\uffcf" +
    "\014\uffcf\017\uffcf\022\uffcf\023\223\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\001\002\000\004\010\047\001\002" +
    "\000\030\010\uffd0\011\uffd0\013\uffd0\014\uffd0\017\uffd0\022" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\001\002" +
    "\000\004\056\uffdd\001\002\000\004\056\227\001\002\000" +
    "\022\004\111\014\112\031\105\040\104\047\113\050\107" +
    "\051\117\052\110\001\002\000\036\012\231\032\137\033" +
    "\126\034\130\035\123\036\124\037\134\040\140\041\125" +
    "\042\120\043\141\044\142\045\135\046\136\001\002\000" +
    "\022\004\111\014\112\031\105\040\104\047\113\050\107" +
    "\051\117\052\110\001\002\000\036\010\047\032\137\033" +
    "\126\034\130\035\123\036\124\037\134\040\140\041\125" +
    "\042\120\043\141\044\142\045\135\046\136\001\002\000" +
    "\030\010\uffdc\011\uffdc\013\uffdc\014\uffdc\017\uffdc\022\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\001\002\000" +
    "\030\010\uffda\011\uffda\013\uffda\014\uffda\017\uffda\022\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\001\002\000" +
    "\030\010\uffd8\011\uffd8\013\uffd8\014\uffd8\017\uffd8\022\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\001\002\000" +
    "\036\013\uffd2\032\137\033\126\034\130\035\123\036\124" +
    "\037\134\040\140\041\125\042\120\043\141\044\142\045" +
    "\135\046\136\001\002\000\004\053\240\001\002\000\004" +
    "\012\241\001\002\000\012\015\242\016\020\021\013\024" +
    "\012\001\002\000\006\005\uffba\012\167\001\002\000\006" +
    "\005\uffba\012\167\001\002\000\004\005\245\001\002\000" +
    "\004\013\uffd4\001\002\000\004\005\247\001\002\000\004" +
    "\013\uffd3\001\002\000\006\005\uffe6\012\uffe6\001\002\000" +
    "\006\005\uffe1\012\252\001\002\000\010\016\020\021\013" +
    "\024\012\001\002\000\004\005\uffe5\001\002\000\004\014" +
    "\255\001\002\000\006\005\uffe3\012\uffe3\001\002\000\006" +
    "\005\uffe1\012\252\001\002\000\004\005\uffe2\001\002\000" +
    "\004\007\261\001\002\000\006\012\ufffa\013\ufffa\001\002" +
    "\000\006\012\030\013\uffe7\001\002\000\004\013\ufff9\001" +
    "\002\000\014\011\uffec\015\014\016\020\021\013\024\012" +
    "\001\002\000\004\011\ufffc\001\002\000\004\004\ufff0\001" +
    "\002\000\004\004\270\001\002\000\012\005\uffe4\016\020" +
    "\021\013\024\012\001\002\000\004\005\272\001\002\000" +
    "\004\010\uffef\001\002\000\004\010\047\001\002\000\014" +
    "\011\uffee\015\uffee\016\uffee\021\uffee\024\uffee\001\002\000" +
    "\014\011\uffec\015\014\016\020\021\013\024\012\001\002" +
    "\000\004\011\uffed\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\037\005\001\001\000\002\001\001\000\004\040\007" +
    "\001\001\000\002\001\001\000\012\003\014\005\020\006" +
    "\016\022\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\026\044" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\033\001\001\000\002\001\001\000\004\017\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\037\001\001\000\004\017\040\001\001\000\002\001\001" +
    "\000\006\020\043\022\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\045\001\001\000\004\016\047" +
    "\001\001\000\004\057\054\001\001\000\004\046\050\001" +
    "\001\000\006\005\052\022\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\044\025\001\001\000\010\003" +
    "\056\004\055\022\057\001\001\000\020\012\074\013\101" +
    "\016\067\025\076\026\073\027\070\030\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\026\001\001" +
    "\000\010\003\056\004\062\022\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\105" +
    "\013\115\023\235\031\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\074\013\101\016\067\025\076" +
    "\026\207\027\070\030\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\202\001\001\000\012\011\105" +
    "\013\115\023\113\031\114\001\001\000\012\011\105\013" +
    "\115\023\177\031\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\105\013\115\023\157\031\114\001\001\000\002\001\001" +
    "\000\012\011\105\013\115\023\143\031\114\001\001\000" +
    "\016\016\130\032\120\033\131\034\126\035\121\036\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\105\013\115\023\142" +
    "\031\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\032\120\033\131" +
    "\034\126\035\121\036\132\001\001\000\014\032\120\033" +
    "\131\034\126\035\121\036\132\001\001\000\014\011\105" +
    "\013\115\014\151\023\150\031\114\001\001\000\012\011" +
    "\105\013\115\023\146\031\114\001\001\000\014\032\120" +
    "\033\131\034\126\035\121\036\132\001\001\000\002\001" +
    "\001\000\016\015\153\032\120\033\131\034\126\035\121" +
    "\036\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\105\013\115\023\155\031\114" +
    "\001\001\000\016\015\156\032\120\033\131\034\126\035" +
    "\121\036\132\001\001\000\002\001\001\000\014\032\120" +
    "\033\131\034\126\035\121\036\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\165" +
    "\001\001\000\004\007\175\001\001\000\004\007\167\001" +
    "\001\000\014\010\172\011\105\013\115\023\173\031\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\174\001\001\000\014\032\120\033\131" +
    "\034\126\035\121\036\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\032\120\033\131" +
    "\034\126\035\121\036\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\105\013\115\023\204\031\114" +
    "\001\001\000\002\001\001\000\014\032\120\033\131\034" +
    "\126\035\121\036\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\011\105\013\115\014" +
    "\211\023\150\031\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\105\013\115\023\217\031\114\001\001" +
    "\000\014\032\120\033\131\034\126\035\121\036\132\001" +
    "\001\000\004\016\221\001\001\000\002\001\001\000\004" +
    "\016\223\001\001\000\002\001\001\000\004\056\225\001" +
    "\001\000\002\001\001\000\012\011\105\013\115\023\227" +
    "\031\114\001\001\000\014\032\120\033\131\034\126\035" +
    "\121\036\132\001\001\000\012\011\105\013\115\023\231" +
    "\031\114\001\001\000\016\016\232\032\120\033\131\034" +
    "\126\035\121\036\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\032\120\033\131\034" +
    "\126\035\121\036\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\242\001\001\000\004\007\245\001" +
    "\001\000\004\007\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\250\001\001\000\004\021\252\001\001\000\004\022\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\255\001\001\000\004\021\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\261\001\001\000\004\017" +
    "\262\001\001\000\002\001\001\000\012\003\014\005\020" +
    "\006\264\022\015\001\001\000\002\001\001\000\004\047" +
    "\266\001\001\000\002\001\001\000\006\020\270\022\042" +
    "\001\001\000\002\001\001\000\004\050\272\001\001\000" +
    "\004\016\273\001\001\000\004\051\274\001\001\000\006" +
    "\005\275\022\051\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public static void main(String[] args){
    try {
      /* Loading the file*/
      FileInputStream file = new FileInputStream(args[0]);/**/
      /* Create lexer analizer with file*/
      yylex lex = new yylex(file);
      /* Create parser analyzer with lex*/  
      parser par = new parser(lex);
      /* Analize file */
      par.setScanner(lex);
      par.parse();
    }catch(Exception x){
      x.printStackTrace();
      System.out.println("Error fatal.\n"); 
    }
  }
  
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error");
    System.out.println("Mensaje: "+message);
    System.out.println("info: "+info.toString());
    if(info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
        /* Comprueba si el numero de línea es mayor o igual que cero */
        if(s.left >= 0) {
	        m.append(" en linea "+(s.left+1));
	        /*Comprueba si el numero de columna es mayoro igual que cero */
	        if (s.right >= 0)
	            m.append(", y columna "+(s.right+1));
	        }
        }
    m.append(" : "+message);
    System.err.println(m);
  }
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  static symbolTable table = new symbolTable();
  static LinkedList<absSymbol>  declList = new LinkedList<absSymbol>();
  static LinkedList<absSymbol>  parList = new LinkedList<absSymbol>();

  private LinkedList<absSymbol> setType(LinkedList<absSymbol> symbolList, Type type) {
    for (int i = 0 ; i < symbolList.size() ; i++) {
        symbolList.get(i).type = type;
    }
    return symbolList;
  }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // literal ::= BOOLEAN 
            {
              Literal RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BoolLiteral l = (BoolLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // literal ::= FLOAT 
            {
              Literal RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FloatLiteral l = (FloatLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // literal ::= INT 
            {
              Literal RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntLiteral l = (IntLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // cond_op ::= OR 
            {
              CondExpr RESULT =null;
		CondExpr c = new CondExpr(); c.setOperator(BinOpType.OR); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_op",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // cond_op ::= AND 
            {
              CondExpr RESULT =null;
		CondExpr c = new CondExpr(); c.setOperator(BinOpType.AND); RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_op",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // eq_op ::= NOT_EQ 
            {
              EqExpr RESULT =null;
		EqExpr eq = new EqExpr(); eq.setOperator(BinOpType.NEQ); RESULT = eq;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eq_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // eq_op ::= EQ 
            {
              EqExpr RESULT =null;
		EqExpr eq = new EqExpr(); eq.setOperator(BinOpType.CEQ); RESULT = eq;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("eq_op",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // rel_op ::= GREATER_EQ_THAN 
            {
              RelExpr RESULT =null;
		RelExpr rel = new RelExpr(); rel.setOperator(BinOpType.GEQ); RESULT = rel;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // rel_op ::= LESS_EQ_THAN 
            {
              RelExpr RESULT =null;
		RelExpr rel = new RelExpr(); rel.setOperator(BinOpType.LEQ); RESULT = rel;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // rel_op ::= GREATER_THAN 
            {
              RelExpr RESULT =null;
		RelExpr rel = new RelExpr(); rel.setOperator(BinOpType.GE); RESULT = rel;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // rel_op ::= LESS_THAN 
            {
              RelExpr RESULT =null;
		RelExpr rel = new RelExpr(); rel.setOperator(BinOpType.LE); RESULT = rel;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_op",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arith_op ::= MODULE 
            {
              ArithExpr RESULT =null;
		ArithExpr ar = new ArithExpr(); ar.setOperator(BinOpType.MOD); RESULT = ar;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arith_op ::= DIV 
            {
              ArithExpr RESULT =null;
		ArithExpr ar = new ArithExpr(); ar.setOperator(BinOpType.DIVIDE);RESULT=ar;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arith_op ::= MULT 
            {
              ArithExpr RESULT =null;
		ArithExpr ar=new ArithExpr();ar.setOperator(BinOpType.MULTIPLY);RESULT= ar;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arith_op ::= MINUS 
            {
              ArithExpr RESULT =null;
		ArithExpr ar=new ArithExpr(); ar.setOperator(BinOpType.MINUS); RESULT = ar;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // arith_op ::= PLUS 
            {
              ArithExpr RESULT =null;
		ArithExpr ar = new ArithExpr();ar.setOperator(BinOpType.PLUS); RESULT = ar;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_op",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // bin_op ::= cond_op 
            {
              BinOpExpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CondExpr c = (CondExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bin_op ::= eq_op 
            {
              BinOpExpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EqExpr e = (EqExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // bin_op ::= rel_op 
            {
              BinOpExpr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RelExpr r = (RelExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bin_op ::= arith_op 
            {
              BinOpExpr RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithExpr a = (ArithExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bin_op",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assign_op ::= ASSIGN_DEC 
            {
              AssignStmt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignStmt d = (AssignStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new DecrementAssign();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assign_op ::= ASSIGN_INC 
            {
              AssignStmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignStmt i = (AssignStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IncrementAssign();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assign_op ::= ASSIGN 
            {
              AssignStmt RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignStmt a = (AssignStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new SimpleAssign();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_op",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // type ::= WINT 
            {
              Type RESULT =null;
		RESULT = Type.INT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // type ::= WBOOLEAN 
            {
              Type RESULT =null;
		RESULT = Type.BOOLEAN;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // type ::= WFLOAT 
            {
              Type RESULT =null;
		RESULT = Type.FLOAT;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // location ::= ID LC expr RC 
            {
              Location RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if (table.search(i) == null) parser.report_fatal_error("ID desconocido.",i);
                                                                RESULT = new ArrayLocation(i, table.getBlockId(), e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // location ::= ID 
            {
              Location RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (table.search(i) == null) parser.report_fatal_error("ID desconocido."+i,i);
                                                                RESULT = new VarLocation(i,table.getBlockId());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // externinvk_arg ::= STRING_LITERAL 
            {
              ArgInvoc RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArgInvocSL(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // externinvk_arg ::= expr 
            {
              ArgInvoc RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArgInvocExpr(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("externinvk_arg",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arg_invoc ::= 
            {
              LinkedList<ArgInvoc> RESULT =null;
		RESULT = new LinkedList<ArgInvoc>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_invoc",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arg_invoc ::= COMMA externinvk_arg arg_invoc 
            {
              LinkedList<ArgInvoc> RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgInvoc ea = (ArgInvoc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int airight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ArgInvoc> ai = (LinkedList<ArgInvoc>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<ArgInvoc> sets = new LinkedList<ArgInvoc>();
                                                                sets.add(ea); sets.addAll(ai); RESULT=sets;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_invoc",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // method_call_expr ::= ID LPAR expr_parameters RPAR 
            {
              MethodCallExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> p = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		absSymbol a = table.search(i); if (a == null) 
                                                                parser.report_fatal_error("ID desconocido.",i); 
                                                                else { if (a instanceof functionSymbol)         
                                                                RESULT = new InternInvkExpr(i, p, ((functionSymbol)             
                                                                a).type);}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // method_call_expr ::= WEXTERNINVK LPAR STRING_LITERAL COMMA WVOID arg_invoc RPAR 
            {
              MethodCallExpr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ArgInvoc> a = (LinkedList<ArgInvoc>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ExternInvkExpr(s, a, null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // method_call_expr ::= WEXTERNINVK LPAR STRING_LITERAL COMMA type arg_invoc RPAR 
            {
              MethodCallExpr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ArgInvoc> a = (LinkedList<ArgInvoc>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ExternInvkExpr(s, a, t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= expr bin_op expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinOpExpr b = (BinOpExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		b.setLeftOperand(e1); b.setRightOperand(e2); RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= LPAR expr RPAR 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new InParentExpr(e, e.getType());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NegationExpr(e, e.getType());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= MINUS expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NegativeExpr(e, e.getType());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= method_call_expr 
            {
              Expression RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodCallExpr mc = (MethodCallExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = mc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= location 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // block ::= LLL NT$16 set_field_decl set_statement NT$17 RLL 
            {
              Block RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Block) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Statement> ss = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Block(table.getBlockId(), ss);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$17 ::= 
            {
              Block RESULT =(Block) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Statement> ss = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
table.deleteLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$16 ::= 
            {
              Block RESULT =null;
table.insertLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // set_statement ::= 
            {
              LinkedList<Statement> RESULT =null;
		RESULT = new LinkedList<Statement>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // set_statement ::= statement set_statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Statement> ss = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Statement> sets = new LinkedList<Statement>();
                                                                sets.add(s); sets.addAll(ss); RESULT=sets;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_parameters_ ::= 
            {
              LinkedList<Expression> RESULT =null;
		RESULT = new LinkedList<Expression>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_parameters_",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_parameters_ ::= COMMA expr expr_parameters_ 
            {
              LinkedList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expression> es = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Expression> l =new LinkedList<Expression>(es); l.add(e);
                                                                RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_parameters_",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_parameters ::= 
            {
              LinkedList<Expression> RESULT =null;
		RESULT = new LinkedList<Expression>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_parameters",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_parameters ::= expr expr_parameters_ 
            {
              LinkedList<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expression> es = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Expression> l =new LinkedList<Expression>(es); l.add(e);
                                                                RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_parameters",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt_if ::= WIF LPAR expr RPAR block 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStmt(e, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt_if ::= WIF LPAR expr RPAR block WELSE block 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b1 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b2 = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStmt(e, b1, b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_if",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt_return ::= WRETURN 
            {
              ReturnStmt RESULT =null;
		RESULT = new ReturnStmt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_return",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt_return ::= WRETURN expr 
            {
              ReturnStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReturnStmt(e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_return",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // method_call_stmt ::= WEXTERNINVK LPAR STRING_LITERAL COMMA WVOID arg_invoc RPAR 
            {
              MethodCallStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ArgInvoc> a = (LinkedList<ArgInvoc>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ExternInvkStmt(s, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // method_call_stmt ::= WEXTERNINVK LPAR STRING_LITERAL COMMA type arg_invoc RPAR 
            {
              MethodCallStmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ArgInvoc> a = (LinkedList<ArgInvoc>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ExternInvkStmt(s, a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // method_call_stmt ::= ID LPAR expr_parameters RPAR 
            {
              MethodCallStmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expression> p = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if (table.search(i) == null) parser.report_fatal_error("ID desconocido.",i);
                                                            else RESULT = new InternInvkStmt(i, p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method_call_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= block 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= SEMICOLON 
            {
              Statement RESULT =null;
		RESULT = new SemiColon(table.getBlockId());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= WCONTINUE SEMICOLON 
            {
              Statement RESULT =null;
		RESULT = new ContinueStmt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= WBREAK SEMICOLON 
            {
              Statement RESULT =null;
		RESULT = new BreakStmt();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= stmt_return SEMICOLON 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReturnStmt r = (ReturnStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = r;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // statement ::= WWHILE expr block 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WhileStmt(e, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // statement ::= WFOR ID NT$15 ASSIGN expr COMMA expr block 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ForStmt(i, e1, e2, b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$15 ::= 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if (table.search(i) == null) parser.report_fatal_error("ID desconocido.",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= stmt_if 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStmt i = (IfStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= method_call_stmt SEMICOLON 
            {
              Statement RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodCallStmt mc = (MethodCallStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = mc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= location assign_op expr SEMICOLON 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssignStmt a = (AssignStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		a.setLocation(l); a.setExpression(e); RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // set_type_id ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		RESULT = (LinkedList<absSymbol>)parList.clone(); parList.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_type_id",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // set_type_id ::= COMMA type ID NT$14 set_type_id 
            {
              LinkedList<absSymbol> RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (LinkedList<absSymbol>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_type_id",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$14 ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parList.add(new simpleSymbol(i, null, t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameters ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		RESULT = (LinkedList<absSymbol>)parList.clone(); parList.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameters ::= type ID NT$13 set_type_id 
            {
              LinkedList<absSymbol> RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (LinkedList<absSymbol>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$13 ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
parList.add(new simpleSymbol(i, null, t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // set_complete_id ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		RESULT = (LinkedList<absSymbol>)declList.clone(); declList.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_complete_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // set_complete_id ::= COMMA ID LC INT RC NT$12 set_complete_id 
            {
              LinkedList<absSymbol> RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (LinkedList<absSymbol>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IntLiteral il = (IntLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_complete_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$12 ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IntLiteral il = (IntLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
declList.add(new arraySymbol(i, Type.UNDEFINED, il.getValue(), null));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // set_complete_id ::= COMMA ID NT$11 set_complete_id 
            {
              LinkedList<absSymbol> RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (LinkedList<absSymbol>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_complete_id",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$11 ::= 
            {
              LinkedList<absSymbol> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
declList.add(new simpleSymbol(i, null, Type.UNDEFINED));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // set_method_decl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_method_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // set_method_decl ::= WVOID ID NT$8 LPAR parameters RPAR NT$9 block NT$10 set_method_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_method_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
table.deleteLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if (p != null) ((functionSymbol)table.search(i)).parameters = p;
                                                            if (table.insertSymbolList(p)==null)
                                                                parser.report_fatal_error("ID ya difinido: ",p.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$8 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
functionSymbol f = new functionSymbol(i, null, null);
                                                            if (table.insertSymbol(f) == null)
                                                                parser.report_fatal_error("ID ya difinido: ",i);
                                                            table.insertLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // set_method_decl ::= type ID NT$5 LPAR parameters RPAR NT$6 block NT$7 set_method_decl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_method_decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
table.deleteLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<absSymbol> p = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if (p != null) 
                                                                ((functionSymbol)table.search(i)).parameters = p;
                                                            if (table.insertSymbolList(p)==null)
                                                                parser.report_fatal_error("ID ya difinido: ",p.toString());
                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
functionSymbol f = new functionSymbol(i, t, null);
                                                            if (table.insertSymbol(f) == null) 
                                                                parser.report_fatal_error("ID ya difinido: ",i);
                                                            table.insertLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // set_field_decl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_field_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // set_field_decl ::= field_decl SEMICOLON set_field_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_field_decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // field_decl ::= type ID NT$4 set_complete_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (table.insertSymbolList(setType(s, t)) == null)
                                                                parser.report_fatal_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if (table.insertSymbol(new simpleSymbol(i, null, t)) == null)
                                                                parser.report_fatal_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_decl ::= type ID LC INT RC NT$3 set_complete_id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IntLiteral il = (IntLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<absSymbol> s = (LinkedList<absSymbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if (table.insertSymbolList(setType(s, t)) == null)
                                                                parser.report_fatal_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("field_decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$3 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IntLiteral il = (IntLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
if (table.insertSymbol(new arraySymbol(i, t, il.getValue(), null)) == null)
                                                                parser.report_fatal_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // set_decl ::= set_method_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // set_decl ::= field_decl SEMICOLON set_decl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_decl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= WCLASS NT$0 ID NT$1 LLL set_decl NT$2 RLL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
table.deleteLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
if (table.insertSymbol(new simpleSymbol(i, null, Type.UNDEFINED)) == null)
                                                                parser.report_fatal_error("ID ya difinido: ",i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
table.insertLevel();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

