/* Taller de Diseño de software 2014

   Proyecto: Compilador
   
  - Integrantes:
    - Coria, Gaston
    - Gastaldi, Diego
    
  *************************************
  
  analyzer.cup representa la gramatica 
  del lenguaje a compilar, ademas informa
  errores en ella.
  
*/

package compiler2014;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import ir.ast.*;
parser code {:

  public static void main(String[] args){
    try {
      /* Loading the file*/
      FileInputStream file = new FileInputStream(args[0]);/**/
      /* Create lexer analizer with file*/
      yylex lex = new yylex(file);
      /* Create parser analyzer with lex*/  
      parser par = new parser(lex);
      /* Analize file */
      par.setScanner(lex);
      par.parse();
    }catch(Exception x){
      x.printStackTrace();
      System.out.println("Error fatal.\n"); 
    }
  }
  
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error");
    System.out.println("Mensaje: "+message);
    System.out.println("info: "+info.toString());
    if(info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
        /* Comprueba si el numero de línea es mayor o igual que cero */
        if(s.left >= 0) {
	        m.append(" en linea "+(s.left+1));
	        /*Comprueba si el numero de columna es mayoro igual que cero */
	        if (s.right >= 0)
	            m.append(", y columna "+(s.right+1));
	        }
        }
    m.append(" : "+message);
    System.err.println(m);
  }
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
  }
:}

action code {:
  static symbolTable table = new symbolTable();
  static LinkedList<absSymbol>  declList = new LinkedList<absSymbol>();
  static LinkedList<absSymbol>  parList = new LinkedList<absSymbol>();

  private LinkedList<absSymbol> setType(LinkedList<absSymbol> symbolList, Type type) {
    for (int i = 0 ; i < symbolList.size() ; i++) {
        symbolList.get(i).type = type;
    }
    return symbolList;
  }
:}


terminal                LPAR, RPAR, LC, RC, LLL, RLL, COMMA, SEMICOLON;
terminal String         ID, WVOID, WBOOLEAN, WBREAK, WCLASS, WINT, WCONTINUE, WELSE, WFLOAT, WFOR, 
                        WIF, WRETURN, WWHILE, WEXTERNINVK;
terminal BinOpType      LESS_THAN, GREATER_THAN, LESS_EQ_THAN, GREATER_EQ_THAN, PLUS, MULT, MINUS, 
                        OR, AND, EQ, NOT_EQ, MODULE, DIV, NOT;
terminal IntLiteral     INT;
terminal FloatLiteral   FLOAT;
terminal BoolLiteral    BOOLEAN;
terminal String         STRING_LITERAL;
terminal AssignStmt     ASSIGN_INC, ASSIGN_DEC, ASSIGN;

non terminal            program, field_decl, set_field_decl, set_method_decl, set_decl;
non terminal            LinkedList<ArgInvoc> arg_invoc;
non terminal            ArgInvoc externinvk_arg;
non terminal            MethodCallExpr method_call_expr; 
non terminal            MethodCallStmt method_call_stmt;                        
non terminal            Location location;                        
non terminal            LinkedList<Expression> expr_parameters, expr_parameters_;
non terminal            Block block;
non terminal            LinkedList<absSymbol> set_complete_id, parameters, set_type_id;
non terminal            Type type;
non terminal            Expression expr;
non terminal            AssignStmt assign_op;
non terminal            Statement statement;
non terminal            LinkedList<Statement> set_statement;
non terminal            ReturnStmt stmt_return;
non terminal            IfStmt stmt_if;
non terminal            Literal literal;
non terminal            BinOpExpr bin_op;
non terminal            ArithExpr arith_op;
non terminal            RelExpr rel_op;
non terminal            EqExpr eq_op;
non terminal            CondExpr cond_op;


precedence left EQ, AND, NOT, NOT_EQ;
precedence left OR;
precedence left LESS_THAN, GREATER_THAN, LESS_EQ_THAN, GREATER_EQ_THAN;
precedence left PLUS, MINUS;             
precedence left MULT, DIV, MODULE;             


start with program;

program     	    ::= WCLASS                              {:table.insertLevel();:} 
                        ID:i                                {:if (table.insertSymbol(new simpleSymbol(i, null, Type.UNDEFINED)) == null)
                                                                parser.report_error("ID ya difinido: ",i);:}
                        LLL set_decl                        {:table.deleteLevel();:} 
                        RLL;

set_decl			::= field_decl SEMICOLON set_decl 
                    |   set_method_decl ;


field_decl		    ::= type:t ID:i LC INT:il RC            {:if (table.insertSymbol(new arraySymbol(i, t, il.getValue(), null)) == null)
                                                                parser.report_error("ID ya difinido: ",i);:}     
                        set_complete_id:s                   {:if (table.insertSymbolList(setType(s, t)) == null)
                                                                parser.report_error("ID ya difinido: ",i);:}
                    |   type:t ID:i                         {:if (table.insertSymbol(new simpleSymbol(i, null, t)) == null)
                                                                parser.report_error("ID ya difinido: ",i);:} 
                        set_complete_id:s                   {:if (table.insertSymbolList(setType(s, t)) == null)
                                                                parser.report_error("ID ya difinido: ",i);:};
                                                        
set_field_decl		::= field_decl SEMICOLON set_field_decl
                    |   /*LAMBDA*/;                                                        
             
set_method_decl		::= type:t ID:i                         {:functionSymbol f = new functionSymbol(i, t, null);
                                                            if (table.insertSymbol(f) == null) 
                                                                parser.report_error("ID ya difinido: ",i);
                                                            table.insertLevel();:} 
                        LPAR parameters:p RPAR              {:if (p != null) 
                                                                ((functionSymbol)table.search(i)).parameters = p;
                                                            if (table.insertSymbolList(p)==null)
                                                                parser.report_error("ID ya difinido: ",p.toString());
                                                            :}
                        block:b {:System.out.println(b.toString());table.deleteLevel();:} set_method_decl
                    |   WVOID ID:i                          {:functionSymbol f = new functionSymbol(i, null, null);
                                                            if (table.insertSymbol(f) == null)
                                                                parser.report_error("ID ya difinido: ",i);
                                                            table.insertLevel();:} 
                        LPAR parameters:p RPAR              {:if (p != null) ((functionSymbol)table.search(i)).parameters = p;
                                                            if (table.insertSymbolList(p)==null)
                                                                parser.report_error("ID ya difinido: ",p.toString());:} 
                        block:b {:System.out.println(b.toString());table.deleteLevel();:} set_method_decl
                    |   /*Lambda*/;
    
set_complete_id 	::= COMMA ID:i                          {:declList.add(new simpleSymbol(i, null, Type.UNDEFINED));:} 
                        set_complete_id:s                   {:RESULT = s;:} 
                    |   COMMA ID:i LC INT:il RC             {:declList.add(new arraySymbol(i, Type.UNDEFINED, il.getValue(), null));:} 
                        set_complete_id:s                   {:RESULT = s;:} 
                    |   /* LAMBDA */                        {:RESULT = (LinkedList<absSymbol>)declList.clone(); declList.clear();:};

parameters 		    ::= type:t ID:i                         {:parList.add(new simpleSymbol(i, null, t));:} 
                        set_type_id:s                       {:RESULT = s;:} 
                    |   /*LAMBDA*/                          {:RESULT = (LinkedList<absSymbol>)parList.clone(); parList.clear();:};

set_type_id 		::= COMMA type:t ID:i                   {:parList.add(new simpleSymbol(i, null, t));:}  
                        set_type_id:s                       {:RESULT = s;:} 
                    |   /*LAMBDA*/                          {:RESULT = (LinkedList<absSymbol>)parList.clone(); parList.clear();:};


statement   		::= location:l assign_op:a expr:e SEMICOLON {:a.setLocation(l); a.setExpression(e); RESULT = a;:}
			        |   method_call_stmt:mc SEMICOLON       {:RESULT = mc;:}
    			    |   stmt_if:i 			                {:RESULT = i;:}
	    		    |   WFOR ID:i                           {:if (table.search(i) == null) parser.report_error("ID desconocido.",i);:} 
                        ASSIGN expr:e1 COMMA expr:e2 block:b{:RESULT = new ForStmt(i, e1, e2, b);:}
	    		    |   WWHILE expr:e block:b               {:RESULT = new WhileStmt(e, b);:}
	    		    |   stmt_return:r SEMICOLON             {:RESULT = r;:}
	    		    |   WBREAK SEMICOLON                    {:RESULT = new BreakStmt();:}
	    		    |   WCONTINUE SEMICOLON                 {:RESULT = new ContinueStmt();:}
	    		    |   SEMICOLON                           {:RESULT = new SemiColon(table.getBlockId());:}
	    		    |   block:b                             {:RESULT = b;:} ;

method_call_stmt    ::= ID:i LPAR expr_parameters:p RPAR    {:if (table.search(i) == null) parser.report_error("ID desconocido.",i);
                                                            else RESULT = new MethodCallStmt(i, p);:}
			        |   WEXTERNINVK LPAR STRING_LITERAL:s COMMA type:t arg_invoc:a RPAR {::}
			        |   WEXTERNINVK LPAR STRING_LITERAL:s COMMA WVOID:t arg_invoc:a RPAR {::};

                      
stmt_return 		::= WRETURN expr:e                          {:RESULT = new ReturnStmt(e);:} 
                    |   WRETURN                                 {:RESULT = new ReturnStmt();:} ;

stmt_if             ::= WIF LPAR expr:e RPAR block:b1 WELSE block:b2{:RESULT = new IfStmt(e, b1, b2);:}
    			    |   WIF LPAR expr:e RPAR block:b            {:RESULT = new IfStmt(e, b);:} ;

expr_parameters 	::= expr:e expr_parameters_:es              {:LinkedList<Expression> l =new LinkedList<Expression>(es); l.add(e);
                                                                RESULT = l;:}
                    |   /* LAMBDA */                            {:RESULT = new LinkedList<Expression>();:};

expr_parameters_	::= COMMA expr:e expr_parameters_:es        {:LinkedList<Expression> l =new LinkedList<Expression>(es); l.add(e);
                                                                RESULT = l;:}
                    |   /* LAMBDA */                            {:RESULT = new LinkedList<Expression>();:};
                    
set_statement 		::= statement:s set_statement:ss            {:LinkedList<Statement> sets = new LinkedList<Statement>();
                                                                sets.add(s); sets.addAll(ss); RESULT=sets;:} 
                    |   /* LAMBDA */                            {:RESULT = new LinkedList<Statement>();:};

block       		::= LLL                                     {:table.insertLevel();:} 
                        set_field_decl:sf set_statement:ss      {:table.deleteLevel();:} 
                        RLL                                     {:RESULT = new Block(table.getBlockId(), ss);:};

expr        		::= location:l                              {:RESULT = l;:}
                    |   method_call_expr:mc                     {:RESULT = mc;:}
			        |   literal:l                               {:RESULT = l;:}
			        |   MINUS expr:e                            {:RESULT = new NegativeExpr(e, e.getType());:}
			        |   NOT expr:e                              {:RESULT = new NegationExpr(e, e.getType());:}
			        |   LPAR expr:e RPAR                        {:RESULT = new InParentExpr(e, e.getType());:}
			        |   expr:e1 bin_op:b expr:e2                {:b.setLeftOperand(e1); b.setRightOperand(e2); RESULT = b;:};

method_call_expr    ::= WEXTERNINVK LPAR STRING_LITERAL:s COMMA type:t arg_invoc:a RPAR {:RESULT = new ExternInvkExpr(s, a, t);:}
			        |   WEXTERNINVK LPAR STRING_LITERAL:s COMMA WVOID arg_invoc:a RPAR {:RESULT = new ExternInvkExpr(s, a, null);:}
                    |   ID:i LPAR expr_parameters:p RPAR        {:absSymbol a = table.search(i); if (a == null) 
                                                                parser.report_error("ID desconocido.",i); 
                                                                else { if (a instanceof functionSymbol)         
                                                                RESULT = new InternInvkExpr(i, p, ((functionSymbol)             
                                                                a).type);}:};			        
			       
arg_invoc 		    ::= COMMA externinvk_arg:ea arg_invoc:ai    {:LinkedList<ArgInvoc> sets = new LinkedList<ArgInvoc>();
                                                                sets.add(ea); sets.addAll(ai); RESULT=sets;:} 
                    |   /* LAMBDA */                            {:RESULT = new LinkedList<ArgInvoc>();:};  

externinvk_arg  	::= expr:e                                  {:RESULT = new ArgInvocExpr(e);:}
                    |   STRING_LITERAL:s                        {:RESULT = new ArgInvocSL(s);:};

location            ::= ID:i                                    {:if (table.search(i) == null) parser.report_error("ID desconocido."+i,i);
                                                                RESULT = new VarLocation(i,table.getBlockId());:}                               
                    |   ID:i LC expr:e RC                       {:if (table.search(i) == null) parser.report_error("ID desconocido.",i);
                                                                RESULT = new ArrayLocation(i, table.getBlockId(), e);:};      

type        		::= WFLOAT                                  {:RESULT = Type.FLOAT;:}
                    |   WBOOLEAN                                {:RESULT = Type.BOOLEAN;:}
                    |   WINT                                    {:RESULT = Type.INT;:};

assign_op   		::= ASSIGN:a                                {:RESULT = new SimpleAssign();:}
    			    |   ASSIGN_INC:i                            {:RESULT = new IncrementAssign();:}
    			    |   ASSIGN_DEC:d                            {:RESULT = new DecrementAssign();:};


bin_op      		::= arith_op:a                              {:RESULT = a;:}
                    |   rel_op:r                                {:RESULT = r;:}
                    |   eq_op:e                                 {:RESULT = e;:}
                    |   cond_op:c                               {:RESULT = c;:};

arith_op    		::= PLUS                                    {:ArithExpr ar = new ArithExpr();ar.setOperator(BinOpType.PLUS); RESULT = ar;:} 
                    |   MINUS                                   {:ArithExpr ar=new ArithExpr(); ar.setOperator(BinOpType.MINUS); RESULT = ar;:} 
                    |   MULT                                    {:ArithExpr ar=new ArithExpr();ar.setOperator(BinOpType.MULTIPLY);RESULT= ar;:} 
                    |   DIV                                     {:ArithExpr ar = new ArithExpr(); ar.setOperator(BinOpType.DIVIDE);RESULT=ar;:} 
                    |   MODULE                                  {:ArithExpr ar = new ArithExpr(); ar.setOperator(BinOpType.MOD); RESULT = ar;:};

rel_op      		::= LESS_THAN                               {:RelExpr rel = new RelExpr(); rel.setOperator(BinOpType.LE); RESULT = rel;:} 
                    |   GREATER_THAN                            {:RelExpr rel = new RelExpr(); rel.setOperator(BinOpType.GE); RESULT = rel;:} 
                    |   LESS_EQ_THAN                            {:RelExpr rel = new RelExpr(); rel.setOperator(BinOpType.LEQ); RESULT = rel;:} 
                    |   GREATER_EQ_THAN                         {:RelExpr rel = new RelExpr(); rel.setOperator(BinOpType.GEQ); RESULT = rel;:} ;

eq_op       		::= EQ                                      {:EqExpr eq = new EqExpr(); eq.setOperator(BinOpType.CEQ); RESULT = eq;:} 
                    |   NOT_EQ                                  {:EqExpr eq = new EqExpr(); eq.setOperator(BinOpType.NEQ); RESULT = eq;:} ;

cond_op     		::= AND                                     {:CondExpr c = new CondExpr(); c.setOperator(BinOpType.AND); RESULT = c;:}
                    |   OR                                      {:CondExpr c = new CondExpr(); c.setOperator(BinOpType.OR); RESULT = c;:} ;

literal     		::= INT:l                                   {:RESULT = l;:}
                    |   FLOAT:l                                 {:RESULT = l;:}
                    |   BOOLEAN:l                               {:RESULT = l;:};

