/* Taller de Diseño de software 2014

   Proyecto: Compilador
   
  - Integrantes:
    - Coria, Gaston
    - Gastaldi, Diego
    
  *************************************
  
  analyzer.cup representa la gramatica 
  del lenguaje a compilar, ademas informa
  errores en ella.
  
*/

package compiler2014;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

parser code {:

  public static void main(String[] args){
    try {
      /* Loading the file*/
      FileInputStream file = new FileInputStream(args[0]);/**/
      /* Create lexer analizer with file*/
      yylex lex = new yylex(file);
      /* Create parser analyzer with lex*/  
      parser par = new parser(lex);
      /* Analize file */
      par.setScanner(lex);
      par.parse();
    }catch(Exception x){
      x.printStackTrace();
      System.out.println("Error fatal.\n"); 
    }
  }
  
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error");
    System.out.println("Mensaje: "+message);
    System.out.println("info: "+info.toString());
    if(info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
        /* Comprueba si el numero de línea es mayor o igual que cero */
        if(s.left >= 0) {
	        m.append(" en linea "+(s.left+1));
	        /*Comprueba si el numero de columna es mayoro igual que cero */
	        if (s.right >= 0)
	            m.append(", y columna "+(s.right+1));
	        }
        }
    m.append(" : "+message);
    System.err.println(m);
  }
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
  }
:}

action code {:
  static symbolTable table = new symbolTable();
  static LinkedList<absSymbol>  declList = new LinkedList<absSymbol>();
  static LinkedList<absSymbol>  parList = new LinkedList<absSymbol>();
  private LinkedList<absSymbol> setType(LinkedList<absSymbol> symbolList, String type) {
    for (int i = 0 ; i < symbolList.size() ; i++) {
        symbolList.get(i).type = type;
    }
    return symbolList;
  }
:}


terminal            LESS_THAN, GREATER_THAN, LESS_EQ_THAN, 
                    GREATER_EQ_THAN, NOT_EQ, MODULE, NOT, LPAR, RPAR, LC, RC, EQ, 
                    OR, AND, ASSIGN_INC, ASSIGN_DEC, ASSIGN, PLUS, MULT, MINUS, LLL, 
                    RLL, COMMA, SEMICOLON, WEXTERNINVK, DIV;
terminal String     ID, WVOID, WBOOLEAN, WBREAK, WCLASS, WINT, WCONTINUE, WELSE, WFLOAT, WFOR, 
                    WIF, WRETURN, WWHILE;
terminal Integer    INT;
terminal Float      FLOAT;
terminal Boolean    BOOLEAN;
terminal String     STRING_LITERAL;

non terminal program, field_decl, block, statement, assign_op, expr, 
             externinvk_arg, set_field_decl, set_method_decl, set_statement, 
             expr_return, else_block, expr_parameters, arg_invoc, set_externinvk_arg, 
             literal, bin_op, arith_op, rel_op, eq_op, cond_op, expr_, set_externinvk_arg_, 
             expr_parameters_, set_decl;
non terminal LinkedList<absSymbol> set_complete_id, parameters, set_type_id;
non terminal String type;

precedence left EQ, AND, NOT, NOT_EQ;
precedence left OR;
precedence left LESS_THAN, GREATER_THAN, LESS_EQ_THAN, GREATER_EQ_THAN;
precedence left PLUS, MINUS;             
precedence left MULT, DIV, MODULE;             


start with program;

program     	    ::= WCLASS {:table.insertLevel();:} ID:i {:if (table.insertSymbol(new simpleSymbol(i, null, "Class")) == null)
                                                                parser.report_error("ID ya difinido: ",i);:}
                        LLL set_decl                         {:table.deleteLevel();:} 
                        RLL;

set_decl			::= field_decl SEMICOLON set_decl 
                    |   set_method_decl ;

field_decl		    ::= type:t ID:i LC INT:il RC    {:if (table.insertSymbol(new arraySymbol(i, t, il, null)) == null)
                                                        parser.report_error("ID ya difinido: ",i);:}     
                        set_complete_id:s           {:if (table.insertSymbolList(setType(s, t)) == null)
                                                        parser.report_error("ID ya difinido: ",i);:}
                    |   type:t ID:i                 {:if (table.insertSymbol(new simpleSymbol(i, null, t)) == null)
                                                        parser.report_error("ID ya difinido: ",i);:} 
                        set_complete_id:s           {:if (table.insertSymbolList(setType(s, t)) == null)
                                                        parser.report_error("ID ya difinido: ",i);:};
             
set_method_decl		::= type:t ID:i LPAR parameters:p RPAR  {:functionSymbol f = new functionSymbol(i, t, p);
                                                            if (table.insertSymbol(f) == null) {
                                                                parser.report_error("ID ya difinido: ",i);
                                                            } else {
                                                                if (table.insertSymbolList(f.parameters)==null)
                                                                    parser.report_error("ID ya difinido: ",f.parameters.toString());
                                                                }
                                                            :} 
                        block set_method_decl
                    |   WVOID:t ID:i LPAR parameters:p RPAR {:functionSymbol f = new functionSymbol(i, t, p);
                                                            if (table.insertSymbol(f) == null) {
                                                                parser.report_error("ID ya difinido: ",i);
                                                            } else {
                                                                if (table.insertSymbolList(f.parameters)==null)
                                                                    parser.report_error("ID ya difinido: ",f.parameters.toString());
                                                                }
                                                            :} 
                        block set_method_decl
                    |   /*Lambda*/;

set_complete_id 	::= COMMA ID:i              {:declList.add(new simpleSymbol(i, null, null));:} 
                        set_complete_id:s       {:RESULT = s;:} 
                    |   COMMA ID:i LC INT:il RC {:declList.add(new arraySymbol(i, null, il, null));:} 
                        set_complete_id:s       {:RESULT = s;:} 
                    |   /* LAMBDA */            {:RESULT = (LinkedList<absSymbol>)declList.clone();
                                                declList.clear();:};

parameters 		    ::= type:t ID:i         {:parList.add(new simpleSymbol(i, null, t));:} 
                        set_type_id:s       {:RESULT = s;:} 
                    |   /*LAMBDA*/          {:RESULT = (LinkedList<absSymbol>)parList.clone();
                                            parList.clear();:};

set_type_id 		::= COMMA type:t ID:i   {:parList.add(new simpleSymbol(i, null, t));:}  
                        set_type_id:s       {:RESULT = s;:} 
                    |   /*LAMBDA*/          {:RESULT = (LinkedList<absSymbol>)parList.clone();
                                            parList.clear();:};

block       		::= LLL {:table.insertLevel();:} set_field_decl set_statement {:table.deleteLevel();:} RLL ;

set_field_decl		::= field_decl SEMICOLON set_field_decl
                    |   /*LAMBDA*/;

set_statement 		::= statement set_statement | /* LAMBDA */ ;

type        		::= WFLOAT:w    {:RESULT = w;:}
                    |   WBOOLEAN:w  {:RESULT = w;:}
                    |   WINT:w      {:RESULT = w;:};

statement   		::= ID:i LC expr:e RC               {:if (table.search(i) == null) 
                                                            parser.report_error("ID desconocido.",i);:}
                        assign_op expr SEMICOLON
                    |   ID:i                            {:if (table.search(i) == null) 
                                                            parser.report_error("ID desconocido.",i);:}  
                        assign_op expr SEMICOLON
			        |   ID:i LPAR expr_parameters RPAR  {:if (table.search(i) == null) 
                                                            parser.report_error("ID desconocido.",i);:} 
			            SEMICOLON 
			        |   WEXTERNINVK LPAR STRING_LITERAL COMMA type arg_invoc RPAR 			            			        
			        |   WEXTERNINVK LPAR STRING_LITERAL COMMA WVOID arg_invoc RPAR 
    			    |   WIF LPAR expr RPAR block else_block
	    		    |   WFOR ID:i                       {:if (table.search(i) == null) 
                                                            parser.report_error("ID desconocido.",i);:} 
                        ASSIGN expr COMMA expr block
	    		    |   WWHILE expr block
	    		    |   WRETURN expr_return SEMICOLON
	    		    |   WBREAK SEMICOLON
	    		    |   WCONTINUE SEMICOLON
	    		    |   SEMICOLON
	    		    |   block ;
           
expr_return 		::= expr 
                    |   /* LAMBDA */ ;

else_block 		    ::= WELSE block 
                    |   /* LAMBDA */ ;

assign_op   		::= ASSIGN 
    			    |   ASSIGN_INC 
    			    |   ASSIGN_DEC ;
           
arg_invoc 		    ::= COMMA set_externinvk_arg 
                    |   /* LAMBDA */ ;

set_externinvk_arg 	::= externinvk_arg set_externinvk_arg_ ;

set_externinvk_arg_	::= COMMA set_externinvk_arg 
                    |   /* LAMBDA */ ;

expr_parameters 	::= expr expr_parameters_ 
                    |   /* LAMBDA */;

expr_parameters_	::= COMMA expr expr_parameters_ 
                    |   /* LAMBDA */ ;

expr        		::= ID:i expr_                              {:if (table.search(i) == null) 
                                                                    parser.report_error("ID desconocido.",i);:} 
                    |   ID:i LC expr RC expr_                   {:if (table.search(i) == null) 
                                                                    parser.report_error("ID desconocido.",i);:}
                    |   ID:i LPAR expr_parameters RPAR expr_    {:if (table.search(i) == null) 
                                                                    parser.report_error("ID desconocido.",i);:}
			        |   WEXTERNINVK LPAR STRING_LITERAL COMMA type arg_invoc RPAR 
			        |   WEXTERNINVK LPAR STRING_LITERAL COMMA WVOID arg_invoc RPAR 			            
			        |   literal expr_
			        |   MINUS expr expr_
			        |   NOT expr expr_
			        |   LPAR expr RPAR expr_;
			
expr_	    		::= bin_op expr 
                    |   /* LAMBDA */;

externinvk_arg  	::= expr 
                    |   STRING_LITERAL ;

bin_op      		::= arith_op | rel_op | eq_op | cond_op ;

arith_op    		::= PLUS | MINUS | MULT | DIV | MODULE  ;

rel_op      		::= LESS_THAN | GREATER_THAN | LESS_EQ_THAN | GREATER_EQ_THAN ;

eq_op       		::= EQ | NOT_EQ ;

cond_op     		::= AND | OR ;

literal     		::= INT:l     {:RESULT = l;:}
                    |   FLOAT:l   {:RESULT = l;:}
                    |   BOOLEAN:l {:RESULT = l;:};

