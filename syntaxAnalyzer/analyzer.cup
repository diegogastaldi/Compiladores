/* Taller de Diseño de software 2014

   Proyecto: Compilador
   
  - Integrantes:
    - Coria, Gaston
    - Gastaldi, Diego
    
  *************************************
  
  analyzer.cup representa la gramatica 
  del lenguaje a compilar, ademas informa
  errores en ella.
  
*/

package syntaxAnalyzer;
import semanticAnalyzer.*;
import lexAnalyzer.yylex;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import ir.ast.*;
import intermediateCode.Labels;
parser code {:

  public static void main(String[] args){
    try {
      /* Loading the file*/
      FileInputStream file = new FileInputStream(args[0]);
      /* Create lexer analizer with file*/
      yylex lex = new yylex(file);
      /* Create parser analyzer with lex*/  
      parser par = new parser(lex);
      /* Analize file */
      par.setScanner(lex);
      par.parse();
    }catch(Exception x){
      x.printStackTrace();
      System.out.println("Error fatal.\n"); 
    }
  }
  
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error");
    System.out.println("Mensaje: "+message);
    System.out.println("info: "+info.toString());
    if(info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
      /* Comprueba si el numero de línea es mayor o igual que cero */
      if(s.left >= 0) {
	      m.append(" en linea "+(s.left+1));
	      /*Comprueba si el numero de columna es mayoro igual que cero */
	      if (s.right >= 0)
	        m.append(", y columna "+(s.right+1));
	    }
    }
    m.append(" : "+message);
    System.err.println(m);
  }
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
  }
	/* Retorna el arbol sintactico */  
  public LinkedList<CompleteFunction> getAST() {
    return CUP$parser$actions.setAst;
  }

  /* Retorna variables Globales */
  public LinkedList<AbsSymbol> getGlobals() {
    return CUP$parser$actions.globals;
  }
:}

action code {:
	/* Variable para comprobar si los simbolos son globales */
  static boolean isGlobal = true;
  /* Tabla de simbolos */
  static SymbolTable table = new SymbolTable();
  /* Lista que almacena lista globales */
  public static LinkedList<AbsSymbol> globals = new LinkedList<AbsSymbol>();
  /* Arbol sintactico */
  public static LinkedList<CompleteFunction> setAst = new LinkedList<CompleteFunction>();  
  /* Genera labels y direcciones de memoria */
  private Labels offset;
  /* Cambia el tipo de una lista de simbolos */
  private LinkedList<AbsSymbol> setType(LinkedList<AbsSymbol> symbolList, Type type) {
    for (int i = 0 ; i < symbolList.size() ; i++) {
        symbolList.get(i).setType(type);
    }
    return symbolList;
  }
:}


terminal                               LPAR, RPAR, LC, RC, LLL, RLL, COMMA, SEMICOLON;
terminal        String                 ID, WBREAK, WCLASS, WCONTINUE, WELSE, WFOR, WIF, WRETURN, WWHILE, WEXTERNINVK;
terminal        BinOpType              LESS_THAN, GREATER_THAN, LESS_EQ_THAN, GREATER_EQ_THAN, PLUS, MULT, MINUS, 
                                       OR, AND, EQ, NOT_EQ, MODULE, DIV, NOT;
terminal        Type                   WVOID, WINT, WFLOAT, WBOOLEAN;
terminal        IntLiteral             INT;
terminal        FloatLiteral           FLOAT;
terminal        BoolLiteral            BOOLEAN;
terminal        String                 STRING_LITERAL;
terminal        AssignStmt             ASSIGN_INC, ASSIGN_DEC, ASSIGN;
terminal                               UNOT;

non terminal                           program, field_decl, set_field_decl, set_method_decl, set_decl;
non terminal    LinkedList<ArgInvoc>   arg_invoc;
non terminal    ArgInvoc               externinvk_arg;
non terminal    MethodCallExpr         method_call_expr; 
non terminal    MethodCallStmt         method_call_stmt;                        
non terminal    Location               location;                        
non terminal    LinkedList<Expression> expr_parameters, expr_parameters_;
non terminal    Block                  block;
non terminal    LinkedList<AbsSymbol>  set_complete_id, parameters, set_type_id;
non terminal    Type                   type;
non terminal    Expression             expr;
non terminal    AssignStmt             assign_op;
non terminal    Statement              statement;
non terminal    LinkedList<Statement>  set_statement;
non terminal    ReturnStmt             stmt_return;
non terminal    IfStmt                 stmt_if;
non terminal    Literal                literal;

precedence left OR;
precedence left AND;
precedence nonassoc LESS_THAN, GREATER_THAN, LESS_EQ_THAN, GREATER_EQ_THAN, EQ, NOT_EQ;
precedence left PLUS, MINUS;             
precedence left MULT, DIV, MODULE;
precedence right UNOT;

start with program;

program     	  ::= WCLASS {:table.insertLevel();:} 
                    ID:i {:if (table.insertSymbol(new SimpleSymbol(i, null, Type.UNDEFINED, 0, false)) == null) parser.report_fatal_error("ID ya difinido: ",i);:}
                    LLL {:offset = new Labels();:}set_decl {:table.deleteLevel();:} 
                    RLL;

set_decl			  ::= field_decl SEMICOLON set_decl 
                    |   set_method_decl ;


field_decl		  ::= type:t ID:i LC INT:il RC {: ArraySymbol s = new ArraySymbol(i, t, il.getValue(), null, offset.getOffSet(il.getValue()), isGlobal);
                                              if (table.insertSymbol(s) == null) parser.report_fatal_error("ID ya difinido: ",i);if (isGlobal) globals.add(s); :}     
                        set_complete_id:s {:if (table.insertSymbolList(setType(s, t)) == null) parser.report_fatal_error("ID ya difinido: ",i);:}
                    |   type:t ID:i {:SimpleSymbol s = new SimpleSymbol(i, null, t, offset.getOffSet(), isGlobal);
                                      if (table.insertSymbol(s) == null) parser.report_fatal_error("ID ya difinido: ",i);if (isGlobal) globals.add(s);:} 
                        set_complete_id:s {:if (table.insertSymbolList(setType(s, t)) == null) parser.report_fatal_error("ID ya difinido: ",i);:};
                                                        
set_field_decl	::= field_decl SEMICOLON set_field_decl
                    |   /*LAMBDA*/;                                                        
             
set_method_decl	::= type:t ID:i {:isGlobal = false; FunctionSymbol f = new FunctionSymbol(i, t, null); if (table.insertSymbol(f) == null) parser.report_fatal_error("ID ya difinido: ",i); table.insertLevel();offset.restart();:} 
                        LPAR parameters:p RPAR {:if (p != null) ((FunctionSymbol)table.search(i)).setParameters(p); if (table.insertSymbolList(p)==null) parser.report_fatal_error("ID ya difinido: ",p.toString());:}
                        block:b {:setAst.add(new CompleteFunction((FunctionSymbol)table.search(i), b, (-offset.getOffSet()/8)-2));table.deleteLevel();:} 
                        set_method_decl
                    |   WVOID:v ID:i {:isGlobal = false; FunctionSymbol f = new FunctionSymbol(i, v, null); if (table.insertSymbol(f) == null) parser.report_fatal_error("ID ya difinido: ",i); table.insertLevel();offset.restart();:} 
                        LPAR parameters:p RPAR {:if (p != null) ((FunctionSymbol)table.search(i)).setParameters(p); if (table.insertSymbolList(p)==null) parser.report_fatal_error("ID ya difinido: ",p.toString());:} 
                        block:b {:setAst.add(new CompleteFunction((FunctionSymbol)table.search(i), b, (-offset.getOffSet()/8)-2)); table.deleteLevel();:} 
                        set_method_decl
                    |   /*Lambda*/;
    
set_complete_id ::= COMMA ID:i set_complete_id:s {:SimpleSymbol ss = new SimpleSymbol(i, null, Type.UNDEFINED, offset.getOffSet(), isGlobal);
                                                    s.add(ss); if (isGlobal) globals.add(ss); RESULT = s;:} 
                    |   COMMA ID:i LC INT:il RC set_complete_id:s {:ArraySymbol ss = new ArraySymbol(i,Type.UNDEFINED,il.getValue(), null, offset.getOffSet(il.getValue()), isGlobal);
                                                                    s.add(ss);if (isGlobal) globals.add(ss); RESULT = s;:} 
                    |   /* LAMBDA */ {:RESULT = new LinkedList<AbsSymbol>();:};

parameters 		  ::= type:t ID:i set_type_id:s {:s.add(0, new SimpleSymbol(i, null, t,  offset.getNumParam(), isGlobal)); RESULT = s;:} 
                    |   /*LAMBDA*/ {:RESULT = new LinkedList<AbsSymbol>();:};

set_type_id 		::= COMMA type:t ID:i set_type_id:s {:s.add(0, new SimpleSymbol(i, null, t,  offset.getNumParam(), isGlobal)); RESULT = s;:} 
                    |   /*LAMBDA*/ {:RESULT = new LinkedList<AbsSymbol>();:};


statement   		::= location:l assign_op:a expr:e SEMICOLON {:a.setLocation(l); a.setExpression(e); RESULT = a;:}
			              |   method_call_stmt:mc SEMICOLON {:RESULT = mc;:}
    			          |   stmt_if:i {:RESULT = i;:}
	    		          |   WFOR:w ID:i
                        ASSIGN expr:e1 COMMA expr:e2 block:b {:SimpleSymbol a = (SimpleSymbol)table.search(i); if (a == null) parser.report_fatal_error("ID desconocido."+i,i); else RESULT = new ForStmt(new VarLocation(i,a.getType(), table.getBlockId(),ileft+1,iright+1, a.getOffSet(), a.getIsGlobal()), e2, e1, b,wleft+1,wright+1);:}
	    		          |   WWHILE:w expr:e block:b {:RESULT = new WhileStmt(e, b,wleft+1,wright+1);:}
	    		          |   stmt_return:r SEMICOLON {:RESULT = r;:}
	    		          |   WBREAK:w SEMICOLON {:RESULT = new BreakStmt(wleft+1,wright+1);:}
	    		          |   WCONTINUE:w SEMICOLON {:RESULT = new ContinueStmt(wleft+1,wright+1);:}
	    		          |   SEMICOLON:s {:RESULT = new SemiColon(table.getBlockId(),sleft+1,sright+1);:}
	    		          |   block:b {:RESULT = b;:} ;

method_call_stmt::=     WEXTERNINVK:w LPAR STRING_LITERAL:s COMMA type arg_invoc:a RPAR {:RESULT=new ExternInvkStmt(s,a,wleft+1,wright+1);:}
			              |   WEXTERNINVK:w LPAR STRING_LITERAL:s COMMA WVOID arg_invoc:a RPAR {:RESULT=new ExternInvkStmt(s,a,wleft+1,wright+1);:}
			              |		ID:i LPAR expr_parameters:p RPAR {:AbsSymbol a = table.search(i); if (a == null) parser.report_fatal_error("ID desconocido.",i); else { if (a instanceof FunctionSymbol) RESULT=new InternInvkStmt(i,p,ileft+1,iright+1); else parser.report_fatal_error("ID "+i+"no es una funcion",i); }:};
                      
stmt_return 		::= WRETURN:w expr:e {:RESULT = new ReturnStmt(e,wleft+1,wright+1);:} 
                    |   WRETURN:w {:RESULT = new ReturnStmt(wleft+1,wright+1);:} ;

stmt_if         ::= WIF:w LPAR expr:e RPAR block:b1 WELSE block:b2 {:RESULT = new IfStmt(e, b1, b2,wleft+1,wright+1);:}
    			          |   WIF:w LPAR expr:e RPAR block:b {:RESULT = new IfStmt(e, b,wleft+1,wright+1);:} ;

expr_parameters ::= expr:e expr_parameters_:es {:es.add(0, e); RESULT = es;:}
                    |   /* LAMBDA */ {:RESULT = new LinkedList<Expression>();:};

expr_parameters_::= COMMA expr:e expr_parameters_:es {:es.add(0, e); RESULT = es;:}
                    |   /* LAMBDA */ {:RESULT = new LinkedList<Expression>();:};
                    
set_statement 	::= statement:s set_statement:ss {:ss.add(0, s); RESULT=ss;:} 
                    |   /* LAMBDA */ {:RESULT = new LinkedList<Statement>();:};

block       		::= LLL:l {:table.insertLevel();:} 
                    set_field_decl:sf set_statement:ss {:table.deleteLevel();:} 
                    RLL {:RESULT = new Block(table.getBlockId(), ss,lleft+1,lright+1);:};

expr        		::= location:l {:RESULT = l;:}
                    |   method_call_expr:mc {:RESULT = mc;:}
      			        |   literal:l {:RESULT = l;:}
			              |   MINUS:m expr:e {:RESULT = new NegativeExpr(e, e.getType(),mleft+1,mright+1);:} %prec UNOT
			              |   NOT:n expr:e {:RESULT = new NegationExpr(e,nleft+1,nright+1);:} %prec UNOT
			              |   LPAR:l expr:e RPAR {:RESULT = new InParentExpr(e, e.getType(),lleft+1,lright+1);:} 
			              |   expr:e1 PLUS:p expr:e2 {:ArithExpr a=new ArithExpr(BinOpType.PLUS,pleft+1,pright+1); a.setLeftOperand(e1); a.setRightOperand(e2); RESULT = a;:}
                    |   expr:e1 MINUS:m expr:e2 {:ArithExpr a=new ArithExpr(BinOpType.MINUS,mleft+1,mright+1); a.setLeftOperand(e1); a.setRightOperand(e2); RESULT = a;:}
                    |   expr:e1 MULT:m expr:e2 {:ArithExpr a=new ArithExpr(BinOpType.MULTIPLY,mleft+1,mright+1); a.setLeftOperand(e1); a.setRightOperand(e2); RESULT = a;:}                        
                    |   expr:e1 DIV:d expr:e2 {:ArithExpr a=new ArithExpr(BinOpType.DIVIDE,dleft+1,dright+1); a.setLeftOperand(e1); a.setRightOperand(e2); RESULT = a;:}                        
                    |   expr:e1 MODULE:m expr:e2 {:ArithExpr a=new ArithExpr(BinOpType.MOD,mleft+1,mright+1); a.setLeftOperand(e1); a.setRightOperand(e2); RESULT = a;:}
                    |   expr:e1 LESS_THAN:l expr:e2 {:RelExpr a=new RelExpr(BinOpType.LE,lleft+1,lright+1); a.setLeftOperand(e1); a.setRightOperand(e2); RESULT = a;:}       
                    |   expr:e1 GREATER_THAN:g expr:e2 {:RelExpr a=new RelExpr(BinOpType.GE,gleft+1,gright+1); a.setLeftOperand(e1); a.setRightOperand(e2); RESULT = a;:}
                    |   expr:e1 LESS_EQ_THAN:l expr:e2 {:RelExpr a=new RelExpr(BinOpType.LEQ,lleft+1,lright+1); a.setLeftOperand(e1); a.setRightOperand(e2); RESULT = a;:}
                    |   expr:e1 GREATER_EQ_THAN:g expr:e2 {:RelExpr a=new RelExpr(BinOpType.GEQ,gleft+1,gright+1); a.setLeftOperand(e1); a.setRightOperand(e2); RESULT = a;:}
                    |   expr:e1 EQ:e expr:e2 {:EqExpr a=new EqExpr(BinOpType.CEQ,eleft+1,eright+1); a.setLeftOperand(e1); a.setRightOperand(e2); RESULT = a;:}
                    |   expr:e1 NOT_EQ:n expr:e2  {:EqExpr a=new EqExpr(BinOpType.NEQ,nleft+1,nright+1); a.setLeftOperand(e1); a.setRightOperand(e2); RESULT = a;:}
                    |   expr:e1 AND:and expr:e2  {:CondExpr a=new CondExpr(BinOpType.AND,andleft+1,andright+1); a.setLeftOperand(e1); a.setRightOperand(e2); RESULT = a;:}
                    |   expr:e1 OR:o expr:e2  {:CondExpr a=new CondExpr(BinOpType.OR,oleft+1,oright+1); a.setLeftOperand(e1); a.setRightOperand(e2); RESULT = a;:};                   

method_call_expr::= WEXTERNINVK:w LPAR STRING_LITERAL:s COMMA type:t arg_invoc:a RPAR {:RESULT=new ExternInvkExpr(s,a,t,wleft+1,wright+1);:}
			              |   WEXTERNINVK:w LPAR STRING_LITERAL:s COMMA WVOID arg_invoc:a RPAR{:RESULT=new ExternInvkExpr(s,a,null,wleft+1,wright+1);:}
                    |   ID:i LPAR expr_parameters:p RPAR {:AbsSymbol a = table.search(i); if (a == null) parser.report_fatal_error("ID desconocido.",i); else { if (a instanceof FunctionSymbol) RESULT=new InternInvkExpr(i,p,((FunctionSymbol)a).getType(),ileft+1,iright+1); else parser.report_fatal_error("ID "+i+"no es una funcion",i); }:};
			       
arg_invoc 		  ::= COMMA externinvk_arg:ea arg_invoc:ai {:ai.add(0, ea); RESULT=ai;:} 
                    |   /* LAMBDA */ {:RESULT = new LinkedList<ArgInvoc>();:};  

externinvk_arg  ::= expr:e {:RESULT = new ArgInvocExpr(e);:}
                    |   STRING_LITERAL:s {:RESULT = new ArgInvocSL(s);:};

location        ::= ID:i {:SimpleSymbol a = (SimpleSymbol)table.search(i); if (a == null) parser.report_fatal_error("ID desconocido."+i,i); else RESULT=new VarLocation(i,a.getType(), table.getBlockId(),ileft+1,iright+1, a.getOffSet(), a.getIsGlobal());:}
                    |   ID:i LC expr:e RC {:ArraySymbol a = (ArraySymbol)table.search(i); if (a == null) parser.report_fatal_error("ID desconocido.",i); else RESULT=new ArrayLocation(i,a.getType(),table.getBlockId(),e,ileft+1,iright+1, a.getOffSet(), a.getIsGlobal(),a.getSize());:};

type        		::= WFLOAT:f {:RESULT = f;:}
                    |   WBOOLEAN:b {:RESULT = b;:}
                    |   WINT:i {:RESULT = i;:};

assign_op   		::= ASSIGN:a {:RESULT = new SimpleAssign(aleft+1,aright+1);:}
        			      |   ASSIGN_INC:i {:RESULT = new IncrementAssign(ileft+1,iright+1);:}
        			      |   ASSIGN_DEC:d {:RESULT = new DecrementAssign(dleft+1,dright+1);:};

 

literal     		::= INT:l {:l.setType(Type.INT); RESULT = l;:}
                    |   FLOAT:l {:l.setType(Type.FLOAT); RESULT = l;:}
                    |   BOOLEAN:l {:l.setType(Type.BOOLEAN); RESULT = l;:};

