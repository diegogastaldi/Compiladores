/* Taller de Diseño de Software 2014

   Proyecto: Compilador
   
  - Integrantes:
    - Coria, Gaston
    - Gastaldi, Diego
    
  *************************************
  
  analyzer.cup representa la gramatica 
  del lenguaje a compilar, ademas informa
  errores en ella.
  
*/

package compiler2014;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

parser code {:

  public static void main(String[] args){
    try {
      /* Loading the file*/
      FileInputStream file = new FileInputStream(args[0]);/**/
      /* Create lexer analizer with file*/
      yylex lex = new yylex(file);
      /* Create parser analyzer with lex*/  
      parser par = new parser(lex);
      /* Analize file */
      par.setScanner(lex);
      par.parse();
    }catch(Exception x){
      x.printStackTrace();
      System.out.println("Error fatal.\n"); 
    }
  }
  
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error");
    System.out.println("Mensaje: "+message);
    System.out.println("info: "+info.toString());
    if(info instanceof java_cup.runtime.Symbol) {
        java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
        /* Comprueba si el numero de línea es mayor o igual que cero */
        if(s.left >= 0) {
	        m.append(" en linea "+(s.left+1));
	        /*Comprueba si el numero de columna es mayoro igual que cero */
	        if (s.right >= 0)
	            m.append(", y columna "+(s.right+1));
	        }
        }
    m.append(" : "+message);
    System.err.println(m);
  }
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    System.exit(1);
  }
:}

action code {:
  static symbolTable table = new symbolTable();
  static LinkedList<absSymbol>  declList = new LinkedList<absSymbol>();
  static LinkedList<absSymbol>  parList = new LinkedList<absSymbol>();
  private LinkedList<absSymbol> setType(LinkedList<absSymbol> symbolList, String type) {
    for (int i = 0 ; i < symbolList.size() ; i++) {
        symbolList.get(i).type = type;
    }
    return symbolList;
  }
:}


terminal            LESS_THAN, GREATER_THAN, LESS_EQ_THAN, 
                    GREATER_EQ_THAN, NOT_EQ, MODULE, NOT, LPAR, RPAR, LC, RC, EQ, 
                    OR, AND, ASSIGN_INC, ASSIGN_DEC, ASSIGN, PLUS, MULT, MINUS, LLL, 
                    RLL, COMMA, SEMICOLON, WEXTERNINVK, DIV;
terminal String     ID, WVOID, WBOOLEAN, WBREAK, WCLASS, WINT, WCONTINUE, WELSE, WFLOAT, WFOR, 
                    WIF, WRETURN, WWHILE;
terminal Integer    INT;
terminal Float      FLOAT;
terminal Boolean    BOOLEAN;
terminal String     STRING_LITERAL;

non terminal PROGRAM, FIELD_DECL, BLOCK, STATEMENT, ASSIGN_OP, EXPR, 
             EXTERNINVK_ARG, SET_FIELD_DECL, SET_METHOD_DECL, SET_STATEMENT, 
             EXPR_RETURN, ELSE_BLOCK, EXPR_PARAMETERS, ARG_INVOC, SET_EXTERNINVK_ARG, 
             LITERAL, BIN_OP, ARITH_OP, REL_OP, EQ_OP, COND_OP, EXPR_, SET_EXTERNINVK_ARG_, 
             EXPR_PARAMETERS_, SET_DECL;
non terminal LinkedList<absSymbol> SET_COMPLETE_ID, PARAMETERS, SET_TYPE_ID;
non terminal String TYPE;

precedence left EQ, AND, NOT, NOT_EQ;
precedence left OR;
precedence left LESS_THAN, GREATER_THAN, LESS_EQ_THAN, GREATER_EQ_THAN;
precedence left PLUS, MINUS;             
precedence left MULT, DIV, MODULE;             


start with PROGRAM;

PROGRAM     	    ::= WCLASS {:table.insertLevel();:} ID:i {:if (table.insertSymbol(new simpleSymbol(i, null, "Class")) == null)
                                                                parser.report_error("ID ya difinido: ",i);:}
                        LLL SET_DECL                         {:table.deleteLevel();:} 
                        RLL;

SET_DECL			::= FIELD_DECL SEMICOLON SET_DECL 
                    |   SET_METHOD_DECL ;

FIELD_DECL		    ::= TYPE:t ID:i LC INT:il RC    {:if (table.insertSymbol(new arraySymbol(i, t, il, null)) == null)
                                                        parser.report_error("ID ya difinido: ",i);:}     
                        SET_COMPLETE_ID:s           {:if (table.insertSymbolList(setType(s, t)) == null)
                                                        parser.report_error("ID ya difinido: ",i);:}
                    |   TYPE:t ID:i                 {:if (table.insertSymbol(new simpleSymbol(i, null, t)) == null)
                                                        parser.report_error("ID ya difinido: ",i);:} 
                        SET_COMPLETE_ID:s           {:if (table.insertSymbolList(setType(s, t)) == null)
                                                        parser.report_error("ID ya difinido: ",i);:};
             
SET_METHOD_DECL		::= TYPE:t ID:i LPAR PARAMETERS:p RPAR  {:functionSymbol f = new functionSymbol(i, t, p);
                                                            if (table.insertSymbol(f) == null) {
                                                                parser.report_error("ID ya difinido: ",i);
                                                            } else {
                                                                if (table.insertSymbolList(f.parameters)==null)
                                                                    parser.report_error("ID ya difinido: ",f.parameters.toString());
                                                                }
                                                            :} 
                        BLOCK SET_METHOD_DECL
                    |   WVOID:t ID:i LPAR PARAMETERS:p RPAR {:functionSymbol f = new functionSymbol(i, t, p);
                                                            if (table.insertSymbol(f) == null) {
                                                                parser.report_error("ID ya difinido: ",i);
                                                            } else {
                                                                if (table.insertSymbolList(f.parameters)==null)
                                                                    parser.report_error("ID ya difinido: ",f.parameters.toString());
                                                                }
                                                            :} 
                        BLOCK SET_METHOD_DECL
                    |   /*Lambda*/;

SET_COMPLETE_ID 	::= COMMA ID:i              {:declList.add(new simpleSymbol(i, null, null));:} 
                        SET_COMPLETE_ID:s       {:RESULT = s;:} 
                    |   COMMA ID:i LC INT:il RC {:declList.add(new arraySymbol(i, null, il, null));:} 
                        SET_COMPLETE_ID:s       {:RESULT = s;:} 
                    |   /* LAMBDA */            {:RESULT = (LinkedList<absSymbol>)declList.clone();
                                                declList.clear();:};

PARAMETERS 		    ::= TYPE:t ID:i         {:parList.add(new simpleSymbol(i, null, t));:} 
                        SET_TYPE_ID:s       {:RESULT = s;:} 
                    |   /*LAMBDA*/          {:RESULT = (LinkedList<absSymbol>)parList.clone();
                                            parList.clear();:};

SET_TYPE_ID 		::= COMMA TYPE:t ID:i   {:parList.add(new simpleSymbol(i, null, t));:}  
                        SET_TYPE_ID:s       {:RESULT = s;:} 
                    |   /*LAMBDA*/          {:RESULT = (LinkedList<absSymbol>)parList.clone();
                                            parList.clear();:};

BLOCK       		::= LLL {:table.insertLevel();:} SET_FIELD_DECL SET_STATEMENT {:table.deleteLevel();:} RLL ;

SET_FIELD_DECL		::= FIELD_DECL SEMICOLON SET_FIELD_DECL
                    |   /*LAMBDA*/;

SET_STATEMENT 		::= STATEMENT SET_STATEMENT | /* LAMBDA */ ;

TYPE        		::= WFLOAT:w    {:RESULT = w;:}
                    |   WBOOLEAN:w  {:RESULT = w;:}
                    |   WINT:w      {:RESULT = w;:};

STATEMENT   		::= ID:i LC EXPR:e RC {:absSymbol a = table.search(i);
                                        if (a == null) 
                                            parser.report_error("ID desconocido.",i);
                                        else {
                                            if (a instanceof arraySymbol) {
                                                arraySymbol array = (arraySymbol)a;
                                                if (e instanceof Integer) {
                                                    Integer integer = (Integer) e;
                                                    if (!(integer < array.size && integer >= 0))
                                                        parser.report_error("Indice fuera de rango en arreglo "+array.name+": ",integer);
                                                } else {
                                                    parser.report_error("Argumento no valido en arreglo "+array.name+": ", e);
                                                }
                                            } else 
                                                parser.report_error("Tipos no conpatibles, esperaba un arreglo y encontro un ",a.type);
                                        }:}
                        ASSIGN_OP EXPR SEMICOLON
                    |   ID:i    {:absSymbol a = table.search(i);
                                if (a == null) 
                                    parser.report_error("ID desconocido.",i);:}  
                        ASSIGN_OP EXPR SEMICOLON
			        |   ID:i LPAR EXPR_PARAMETERS RPAR  {:absSymbol a = table.search(i);
                                    			        if (a == null) 
                                                            parser.report_error("ID desconocido.",i);
                                                        :} 
			            SEMICOLON 
			        |   WEXTERNINVK LPAR STRING_LITERAL COMMA TYPE ARG_INVOC RPAR 			            			        
			        |   WEXTERNINVK LPAR STRING_LITERAL COMMA WVOID ARG_INVOC RPAR 
    			    |   WIF LPAR EXPR RPAR BLOCK ELSE_BLOCK
	    		    |   WFOR ID:i   {:absSymbol a = table.search(i);
	    		                    if (a == null) 
                                        parser.report_error("ID desconocido.",i);:} 
                        ASSIGN EXPR COMMA EXPR BLOCK
	    		    |   WWHILE EXPR BLOCK
	    		    |   WRETURN EXPR_RETURN SEMICOLON
	    		    |   WBREAK SEMICOLON
	    		    |   WCONTINUE SEMICOLON
	    		    |   SEMICOLON
	    		    |   BLOCK ;
           
EXPR_RETURN 		::= EXPR 
                    |   /* LAMBDA */ ;

ELSE_BLOCK 		    ::= WELSE BLOCK 
                    |   /* LAMBDA */ ;

ASSIGN_OP   		::= ASSIGN 
    			    |   ASSIGN_INC 
    			    |   ASSIGN_DEC ;
           
ARG_INVOC 		    ::= COMMA SET_EXTERNINVK_ARG 
                    |   /* LAMBDA */ ;

SET_EXTERNINVK_ARG 	::= EXTERNINVK_ARG SET_EXTERNINVK_ARG_ ;

SET_EXTERNINVK_ARG_	::= COMMA SET_EXTERNINVK_ARG 
                    |   /* LAMBDA */ ;

EXPR_PARAMETERS 	::= EXPR EXPR_PARAMETERS_ 
                    |   /* LAMBDA */;

EXPR_PARAMETERS_	::= COMMA EXPR EXPR_PARAMETERS_ 
                    |   /* LAMBDA */ ;

EXPR        		::= ID:i EXPR_                              {:absSymbol a = table.search(i);
                                                                if (a == null) 
                                                                    parser.report_error("ID desconocido.",i);:} 
                    |   ID:i LC EXPR RC EXPR_                   {:absSymbol a = table.search(i);
                                                                if (a == null) 
                                                                    parser.report_error("ID desconocido.",i);:}
                    |   ID:i LPAR EXPR_PARAMETERS RPAR EXPR_    {:absSymbol a = table.search(i);
                                                                 if (a == null) 
                                                                    parser.report_error("ID desconocido.",i);:}
			        |   WEXTERNINVK LPAR STRING_LITERAL COMMA TYPE ARG_INVOC RPAR 
			        |   WEXTERNINVK LPAR STRING_LITERAL COMMA WVOID ARG_INVOC RPAR 			            
			        |   LITERAL EXPR_
			        |   MINUS EXPR EXPR_
			        |   NOT EXPR EXPR_
			        |   LPAR EXPR RPAR EXPR_;
			
EXPR_	    		::= BIN_OP EXPR 
                    |   /* LAMBDA */;

EXTERNINVK_ARG  	::= EXPR 
                    |   STRING_LITERAL ;

BIN_OP      		::= ARITH_OP | REL_OP | EQ_OP | COND_OP ;

ARITH_OP    		::= PLUS | MINUS | MULT | DIV | MODULE  ;

REL_OP      		::= LESS_THAN | GREATER_THAN | LESS_EQ_THAN | GREATER_EQ_THAN ;

EQ_OP       		::= EQ | NOT_EQ ;

COND_OP     		::= AND | OR ;

LITERAL     		::= INT:l     {:RESULT = l;:}
                    |   FLOAT:l   {:RESULT = l;:}
                    |   BOOLEAN:l {:RESULT = l;:};

